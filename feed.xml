<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="/insidepixce-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="/insidepixce-blog/" rel="alternate" type="text/html" /><updated>2024-08-28T19:09:28-09:00</updated><id>/insidepixce-blog/feed.xml</id><title type="html">Insidepixce inworld</title><subtitle>나의 기막힌 성장기</subtitle><author><name>insidepixce</name></author><entry><title type="html">DOM과 렌더링 엔진 완벽 이해하기!</title><link href="/insidepixce-blog/html-css/2024/08/27/dom/" rel="alternate" type="text/html" title="DOM과 렌더링 엔진 완벽 이해하기!" /><published>2024-08-27T23:09:00-09:00</published><updated>2024-08-27T23:09:00-09:00</updated><id>/insidepixce-blog/html-css/2024/08/27/dom</id><content type="html" xml:base="/insidepixce-blog/html-css/2024/08/27/dom/"><![CDATA[<p>오늘은 스터디 주제에 추가적인 주제가 있었는데요! 우리가 듣고 있는 과정에 들어있는 부분이라 논의해 보면 좋을 것 같았어요!</p>

<h1 id="-dom과-렌더링-엔진-완벽-이해하기-️">🌐 DOM과 렌더링 엔진 완벽 이해하기! 🛠️</h1>

<p>웹 개발에서 꼭 알아야 할 <strong>DOM</strong>과 <strong>렌더링 엔진</strong>에 대해서 알아보려고 해요! 🤔 HTML, CSS, JavaScript가 웹사이트에서 어떻게 동작하고, 브라우저가 이 모든 것을 처리하는지 궁금하시죠? 그러면 함께 공부해볼까요? ✨</p>

<hr />

<h2 id="dom이란-">DOM이란? 🤖</h2>

<p>DOM은 <strong>Document Object Model</strong>의 약자에요. 📝 웹 페이지를 구조화된 <strong>트리 형태</strong>로 변환한 모델이죠. HTML 문서가 브라우저에 의해 <strong>파싱</strong>되면, DOM이라는 트리 구조로 변환되어 우리가 페이지의 각 요소에 쉽게 접근하고 조작할 수 있게 돼요. 🌳</p>

<h3 id="dom의-특징">DOM의 특징</h3>

<ul>
  <li><strong>파싱</strong>: 브라우저는 HTML 파일을 읽고 분석해서 DOM이라는 트리 구조를 만들어요. 📄➡️🌳</li>
  <li><strong>구조화</strong>: DOM은 문서의 계층적인 구조를 표현해요. HTML 태그들은 부모-자식 관계로 연결되고, 이로 인해 문서가 트리처럼 생긴 구조를 가지게 돼요. 🌿</li>
  <li><strong>동적</strong>: DOM은 <strong>동적으로</strong> 변경 가능해요. JavaScript로 DOM을 조작하면 웹 페이지의 내용을 실시간으로 수정할 수 있답니다! 😎✨</li>
</ul>

<h3 id="dom-구조-예시-">DOM 구조 예시 🌟</h3>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>DOM 예시<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>Hello, World!<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;p&gt;</span>이것은 DOM의 예시입니다.<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>

</code></pre></div></div>

<p>이 HTML 문서가 파싱되면, 브라우저는 이를 아래와 같은 DOM 트리로 변환해요. 🌳</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">
-</span> Document
<span class="p">  -</span> html
<span class="p">    -</span> head
<span class="p">      -</span> title
<span class="p">        -</span> "DOM 예시"
<span class="p">    -</span> body
<span class="p">      -</span> h1
<span class="p">        -</span> "Hello, World!"
<span class="p">      -</span> p
<span class="p">        -</span> "이것은 DOM의 예시입니다."

</code></pre></div></div>

<p>여기서 모든 요소는 노드로 표현되고, 각 노드는 부모-자식 관계를 가지는 계층적인 구조로 연결돼요. DOM 덕분에 JavaScript로 웹 페이지의 특정 부분을 쉽게 선택하고 조작할 수 있는 거죠! 🛠️</p>

<hr />

<h2 id="렌더링-엔진이란-">렌더링 엔진이란? 🎨</h2>

<p>브라우저의 <strong>렌더링 엔진</strong>은 웹 페이지를 <strong>그리는</strong> 중요한 역할을 해요! 🖼️ HTML, CSS, JavaScript를 읽어서 사용자가 보는 멋진 화면을 만들어주는 엔진이죠. 웹 페이지가 <strong>렌더링</strong>되는 과정은 생각보다 복잡한데, 여기서 중요한 건 <strong>어떻게 순서대로 처리되는지</strong>를 이해하는 거예요! 🕹️</p>

<h3 id="렌더링-엔진의-과정-">렌더링 엔진의 과정 🚀</h3>

<p>1️⃣ <strong>HTML 파싱 및 DOM 생성</strong></p>

<p>브라우저는 HTML 문서를 읽고, 이를 파싱해서 DOM 트리를 생성해요. 🌳</p>

<p>2️⃣ <strong>CSS 파싱 및 CSSOM 생성</strong></p>

<p>CSS 파일을 읽어들여 <strong>CSSOM</strong>(CSS Object Model) 트리로 변환해요. 이 트리도 DOM처럼 구조화된 형태랍니다! 🎨</p>

<p>3️⃣ <strong>렌더 트리 생성</strong></p>

<p>이제 <strong>렌더 트리</strong>가 만들어지는데, 이 과정에서는 DOM과 CSSOM이 결합되어 브라우저가 각 요소가 화면에 어떻게 배치될지를 결정해요. 💡 렌더 트리는 DOM 트리와 달리 화면에 표시되지 않는 요소(예: <code class="language-plaintext highlighter-rouge">display: none;</code>으로 숨겨진 요소)는 제외됩니다.</p>

<p>4️⃣ <strong>레이아웃 계산</strong></p>

<p>렌더 트리가 만들어지면, 각 요소가 어디에 위치해야 할지 계산하는 <strong>레이아웃 단계</strong>가 시작돼요. 요소들의 크기와 위치가 결정됩니다. 📏</p>

<p>5️⃣ <strong>페인팅 (Painting)</strong></p>

<p>모든 요소의 위치가 결정되면, 브라우저가 실제로 화면에 그리기 시작해요! 이 단계에서 각 요소의 색상, 그림자, 테두리 등이 적용돼요. 🎨🖌️</p>

<p>6️⃣ <strong>컴포지팅 (Compositing)</strong></p>

<p>페인팅이 끝난 후, 브라우저는 각 레이어를 합쳐서 최종 화면을 구성해요. 이 과정에서 애니메이션이나 변환이 있을 경우, 컴포지팅 단계에서 처리돼요. ✨</p>

<hr />

<h2 id="dom과-렌더링-엔진의-관계-">DOM과 렌더링 엔진의 관계 🔗</h2>

<p>이제 DOM과 렌더링 엔진의 관계를 쉽게 설명해볼게요! 🧩</p>

<ul>
  <li><strong>DOM</strong>은 웹 페이지의 구조를 나타내는 <strong>트리</strong>이고, <strong>렌더링 엔진</strong>은 이 DOM을 읽고 <strong>화면에 그리는 역할</strong>을 해요.</li>
  <li>렌더링 엔진은 <strong>DOM 트리</strong>와 <strong>CSSOM 트리</strong>를 결합하여 웹 페이지의 <strong>레이아웃과 스타일</strong>을 결정한 후, <strong>페인팅</strong> 과정을 통해 화면에 표시합니다.</li>
</ul>

<p>즉, DOM은 웹 페이지의 뼈대를 형성하고, 렌더링 엔진은 그 뼈대에 옷을 입히고 색칠하는 과정인 셈이죠! 😄💡</p>

<hr />

<h2 id="cssom이란-️">CSSOM이란? 🖼️</h2>

<p><strong>CSSOM</strong>은 <strong>CSS Object Model</strong>의 약자예요! 🎨 쉽게 말해, <strong>CSSOM은 CSS를 구조화한 트리</strong>라고 할 수 있어요. CSS 파일이나 <code class="language-plaintext highlighter-rouge">&lt;style&gt;</code> 태그에 있는 CSS 스타일이 브라우저에 의해 <strong>파싱</strong>되면서 구조화된 트리로 변환되는 거죠. 이 트리는 웹 페이지의 스타일을 관리하고, 브라우저가 <strong>어떻게 스타일을 적용할지</strong> 결정하는 데 사용돼요! 📑</p>

<h3 id="cssom의-역할-">CSSOM의 역할 ✨</h3>

<ul>
  <li><strong>파싱</strong>: 브라우저는 CSS 파일이나 HTML 내의 <code class="language-plaintext highlighter-rouge">&lt;style&gt;</code> 태그를 읽고 이를 파싱해 <strong>CSSOM 트리</strong>를 생성해요. 🌳</li>
  <li><strong>구조화</strong>: DOM처럼, CSSOM도 <strong>계층적인 구조</strong>를 가지고 있어요. 각 스타일 규칙이 구조적으로 나열되고, 특정 요소에 어떤 스타일이 적용되는지 명확하게 나타내요. 🌐</li>
  <li><strong>스타일 적용</strong>: CSSOM은 <strong>DOM과 함께 동작</strong>해요. DOM은 웹 페이지의 <strong>구조</strong>를 나타내고, CSSOM은 그 구조에 <strong>스타일을 적용</strong>하는 거죠. 두 트리가 결합되어 브라우저는 각 요소가 어떤 스타일을 가져야 하는지 알아낼 수 있어요! 🎨</li>
</ul>

<hr />

<h2 id="cssom-트리의-생성-과정-">CSSOM 트리의 생성 과정 🌱</h2>

<p>1️⃣ <strong>CSS 파싱</strong></p>

<p>브라우저가 CSS 파일을 읽으면, 이를 분석해 CSSOM 트리를 만들어요. 각 CSS 규칙은 트리의 한 노드로 변환돼요. 🌳</p>

<p>2️⃣ <strong>계층적 구조 생성</strong></p>

<p>CSS 규칙이 DOM 요소에 맞춰 <strong>계층적으로 정리</strong>돼요. 이 구조 덕분에 브라우저는 어떤 CSS 규칙이 어떤 요소에 적용되는지를 명확하게 알 수 있답니다. 😊</p>

<h3 id="cssom-트리-예시-">CSSOM 트리 예시 🌟</h3>

<p>다음과 같은 CSS 스타일이 있다고 해볼게요:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">body</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">lightblue</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">h1</span> <span class="p">{</span>
  <span class="nl">color</span><span class="p">:</span> <span class="no">darkblue</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">p</span> <span class="p">{</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">16px</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>

<p>이 CSS 스타일이 <strong>CSSOM 트리</strong>로 변환되면, 다음과 같이 구조화돼요:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">
-</span> CSSOM
<span class="p">  -</span> body
<span class="p">    -</span> background-color: lightblue
<span class="p">  -</span> h1
<span class="p">    -</span> color: darkblue
<span class="p">  -</span> p
<span class="p">    -</span> font-size: 16px

</code></pre></div></div>

<p>이 구조는 <strong>DOM 트리</strong>와 매칭되어 각 요소가 어떻게 스타일링될지를 결정해줘요. DOM은 페이지의 구조를 나타내고, CSSOM은 그 구조에 스타일을 입히는 거죠! 🎨✨</p>

<hr />

<h2 id="cssom과-dom의-관계-">CSSOM과 DOM의 관계 🔗</h2>

<p>이제 <strong>DOM</strong>과 <strong>CSSOM</strong>이 어떻게 함께 동작하는지 설명해볼게요! 🔄</p>

<ul>
  <li><strong>DOM</strong>은 웹 페이지의 <strong>구조</strong>를 나타내고, <strong>CSSOM</strong>은 그 구조에 <strong>스타일을 적용</strong>해요. 두 트리는 결합되어 브라우저가 <strong>렌더 트리</strong>를 생성해요. 이 렌더 트리는 실제로 화면에 그려질 요소들과 그 스타일을 결정하는 중요한 트리랍니다! 🎯</li>
  <li><strong>렌더링 엔진</strong>은 DOM과 CSSOM을 읽고 결합하여 <strong>화면에 표시될 최종 레이아웃과 스타일</strong>을 계산해요. 그 후, 페인팅 과정을 통해 화면에 나타나게 되죠! 🖼️</li>
</ul>

<hr />

<h2 id="-결론-">✨ 결론 ✨</h2>

<p>DOM과 렌더링 엔진은 웹 페이지가 화면에 나타나기까지 중요한 역할을 하는 친구들이에요! DOM은 HTML 문서를 구조화한 트리이고, 렌더링 엔진은 그 DOM과 CSSOM을 활용해 실제 화면에 페이지를 그리는 작업을 수행하죠. 🖥️</p>

<p>이 과정을 이해하면, 웹 페이지를 더 효율적으로 만들고, 최적화하는 방법을 알게 될 거예요! 😊 앞으로 더 복잡한 웹 기술들도 차근차근 공부하면서, 멋진 웹사이트를 만들어봐요! 🎉</p>

<hr />]]></content><author><name>insidepixce</name></author><category term="html-css" /><summary type="html"><![CDATA[오늘은 스터디 주제에 추가적인 주제가 있었는데요! 우리가 듣고 있는 과정에 들어있는 부분이라 논의해 보면 좋을 것 같았어요!]]></summary></entry><entry><title type="html">함수1</title><link href="/insidepixce-blog/49challenge/2024/08/27/%ED%95%A8%EC%88%980828/" rel="alternate" type="text/html" title="함수1" /><published>2024-08-27T23:09:00-09:00</published><updated>2024-08-27T23:09:00-09:00</updated><id>/insidepixce-blog/49challenge/2024/08/27/%ED%95%A8%EC%88%980828</id><content type="html" xml:base="/insidepixce-blog/49challenge/2024/08/27/%ED%95%A8%EC%88%980828/"><![CDATA[<p>오늘 49일 챌린지에서는 함수에 대해서 공부해보았는데요, 양이 너무 많아가지고 12과인 함수 전부 공부하지 않고 12과 12.3까지 공부하도록 했어요. ✍️📚</p>

<p>우리가 중고등학교 수학 과정을 공부할때 ‘함수’에 대해서 많이들 익히 들어본 경험이 있죠. 저는 그 함수랑 이 함수가 비슷하다고 생각해요! 🤔</p>

<h1 id="함수란-">함수란? 🤖</h1>

<blockquote>
  <p><em>함수는 마치 재료를 투입받아 제품을 생산하는 기계와 같다</em></p>

  <p>-모던 자바스크립트 딥다이브 154쪽-</p>

</blockquote>

<p>저는 함수를 책의 정의와는 조금 다른 ‘자판기’에 비유하고는 하는데요. 🥤</p>

<h3 id="내가-한번-자판기에-비유해볼게-">내가 한번 자판기에 비유해볼게! 🎯</h3>

<p>먼저 자판기에 동전을 넣고 나면 해당 동전은 분류를 위해 과정을 거치죠. 분류 과정에는 이게 500원짜리인지, 100원짜리인지, 10원짜리인지, 50원짜리인지 알기 위해 각 단계를 거쳐요. 💰➡️⚙️</p>

<p>그 단계가 저는 마치 함수 안에 있는 실행문들이라고 느껴졌어요. if문에 대입할수도 있겠죠. 만약 이 동전이 500원짜리라는 판단이 내려지면, 나머지 분류 단계는 거칠 필요가 없으니까, 500원짜리를 입력받았다고 기록하고, 결과물인 상품을 내보내겠죠? 🎁</p>

<h3 id="이걸로-return과-consolelog를-이해해보자-️">이걸로 return과 console.log를 이해해보자! 🔄🖥️</h3>

<p>상품이 나오기는 했지만 꺼내야 내가 먹거나 사용할 수 있으니 함수안에서 return을 해줘야 그걸 꺼내가지고 가져갈 수 있고요. 🍹</p>

<p>500원 짜리가 들어왔습니다라는 문구를 출력해줘야 우리가 넣은 동전이 잘 인식되었는지 볼 수 있죠. 💬✅</p>

<hr />

<p>하지만 console.log는 그저 출력해줄 뿐이고, 자판기로 비유하자면 일정 시간이 지나 프로세스가 끝나버리면 증발해버리는 애죠. 🌬️</p>

<p>근데 return 으로 음료수를 꺼내주면? 우리가 자판기 밖에서도 먹을 수 있죠? 🍹🥤</p>

<p>글재주가 안좋아서 비유가 찰떡은 아니다만, 그냥 그렇다구요 ㅎㅎㅎ 😅</p>

<h1 id="정의해보자-">정의해보자! 🔍</h1>

<blockquote>
  <p><em>함수란 일련의 과정을 문으로 구현하고 코드 블록으로 감싸서 하나의 실행 단위로 정의한 것이다</em></p>

  <ul>
    <li>모던 자바스크립트 딥다이브 155쪽-</li>
  </ul>
</blockquote>

<p>그니까, 함수는 여러가지 실행시킬 것들을 모아서 그냥 하나로 묶은 거라고 볼 수 있겠네요. 🎁🔗</p>

<h3 id="용어를-알아보자-">용어를 알아보자! 📖</h3>

<p><strong>매개변수</strong> : 함수 내부로 입력을 전달받는 변수 ⚙️</p>

<p><strong>인수</strong> : 입력 💻</p>

<p><strong>반환값</strong> : 출력 📤</p>

<p>책은 이렇게 정의를 해두었는데요. 구조상으로 보자면 이래요. 🛠️</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">function</span> <span class="nf">함수이름</span><span class="p">(</span><span class="nx">매개변수1</span><span class="p">,</span> <span class="nx">매개변수2</span><span class="p">)</span> <span class="p">{</span>
     <span class="nx">실행문</span>
 <span class="p">}</span>

 <span class="nf">함수이름</span><span class="p">(</span><span class="nx">인수1</span><span class="p">,</span> <span class="nx">인수2</span><span class="p">);</span>

</code></pre></div></div>

<p>이렇게 볼 수 있겠죠! 👀 책에서는 이러한 실행문의 예시를 들었는데요.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">return</span> <span class="nx">반환값1</span> <span class="o">+</span> <span class="nx">반환값2</span><span class="p">;</span>

</code></pre></div></div>

<p>이걸 전부 대입한 예시도 써볼게요. ✏️</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span><span class="p">;</span>
	<span class="p">}</span>
<span class="nf">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>

</code></pre></div></div>

<p>그림 12-2의 예시거든요. 이런 식으로 함수가 사용된다고 보시면 돼요. 💡</p>

<h3 id="주목할-점-">주목할 점! 🔍</h3>

<blockquote>
  <p>함수 정의만으로 함수가 실행되는것은 아니다</p>

  <ul>
    <li>모던 자바스크립트 딥다이브 155쪽-</li>
  </ul>
</blockquote>

<p>자 , 함수의 정의가 무엇이였을까요? 🤔</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span>
	<span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>

<p>이게 정의에요. 지금 아까의 코드에서 <code class="language-plaintext highlighter-rouge">add(2,5)</code> 만 빠져있는 상태죠? 이렇게 정의만 하면 아무 일도 실행되지 않아요. 🛑</p>

<p>여기서 <code class="language-plaintext highlighter-rouge">return</code> 과 <code class="language-plaintext highlighter-rouge">console.log</code>를 이해하신 분들 중에서는 이러한 질문도 있을 수 있겠네요? 🤷‍♀️</p>

<blockquote>
  <p>console.log가 없어서 그런 거 아냐?</p>

</blockquote>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span>
	<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span> <span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>

<p>이 코드만으로 실행이 될까요? 정답은 ‘아니다’입니다. ❌ 왜냐면 함수는 정의만으로 실행되지 않거든요. 우리가 기계를 만들어놓고 실행버튼을 안 눌러주면 작동하지 않는거랑 똑같아요. ⚙️🔘</p>

<h3 id="그럼-어떻게-실행시켜야-하는데-">그럼 어떻게 실행시켜야 하는데? 🚀</h3>

<p><code class="language-plaintext highlighter-rouge">함수 호출</code> 을 하셔야 합니다. ☎️</p>

<blockquote>
  <p>함수를 호출하면 코드 블록에 담긴 문들이 일괄적으로 실행되고, 실행 결과, 즉 반환값을 반환한다</p>

  <ul>
    <li>모던 자바스크립트 딥다이브 156쪽-</li>
  </ul>
</blockquote>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">함수이름</span><span class="p">(</span><span class="nx">인수</span><span class="p">,</span> <span class="nx">인수</span><span class="p">)</span>

</code></pre></div></div>

<p>인수가 여러개라면 더 넣을수도 있겠죠? 📥 일단은 이게 함수 호출의 폼이라고 생각해주시면 돼요. 📝</p>

<h3 id="함수-이거-왜쓰는데-️">함수, 이거 왜쓰는데? 🤷‍♂️</h3>

<blockquote>
  <p>필요할 때 호출할 수 있어서!</p>

  <p>몇 번이든 재사용이 가능해서!</p>

</blockquote>

<p>즉 , <strong>코드의 재사용</strong> 측면에서 굉장히 좋다고 생각해요. 유지보수도 쉽고요. 🔄🛠️</p>

<p>한번만 써놓고 함수 호출을 통해 여러번 써먹을 수 있다는게 장점이라는거죠. 💡</p>

<h1 id="함수-리터럴-️">함수 리터럴 🖊️</h1>

<blockquote>
  <p>자바스크립트의 함수는 객체 타입의 값이다. 따라서 숫자 값을 숫자 리터럴로 생성하고 객체를 객체 리터럴로 생성하는 것 처럼 함수도 리터럴로 생성할 수 있다. 함수 리터럴은 function 키워드, 함수 이름, 매개변수, 함수 몸체로 구성된다.</p>

  <ul>
    <li>모던 자바스크립트 딥다이브 157쪽-</li>
  </ul>
</blockquote>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">변수</span><span class="o">=</span> <span class="kd">function</span> <span class="nf">함수이름</span><span class="p">(</span><span class="nx">인수</span><span class="p">,</span><span class="nx">인수</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">실행문</span>
<span class="p">};</span>

</code></pre></div></div>

<p>그냥 함수 자체를 변수에 저장할 수 있다는 소리를 저렇게도 거창하게 해놨네요. 😅</p>

<h2 id="함수-리터럴과-관련된-이야기들-">함수 리터럴과 관련된 이야기들 💬</h2>

<ul>
  <li>함수 이름은 식별자기 때문에 식별자 네이밍 규칙을 따라야 해요.</li>
  <li>함수 이름은 함수 몸체 내에서만 참조할 수 있는 식별자에요.</li>
  <li>함수 이름은 생략할 수 있어요
    <ul>
      <li>이름이 있는 함수를 기명함수, 이름이 없는 함수를 익명 함수라고 해요. 🤐</li>
    </ul>
  </li>
  <li>각 매개변수는 순서별로 구별되어요. ⏩</li>
  <li>매개변수는 함수 몸체 내에서 변수와 같아요. 그러니 식별자 네이밍 규칙을 따라야 해요. 🛠️</li>
</ul>

<p>이렇게 기본적으로 함수에 대해 알아봤는데요. 📘</p>

<p>아, 함수는 객체긴 한데 일반 객체와는 좀 달라요. 호출할 수 있고 없고, 그리고 고유한 프로퍼티를 가지는지 안 가지는지에 따라 다른데요. 🤖</p>

<p>아마 일주일 뒤면 이 개념에 대해 완벽하게 이해할 수 있을 것 같아요. 18장에 나온다고 하니깐요! 🗓️📖</p>

<h1 id="오늘-스터디에서-생각해볼-문제">오늘 스터디에서 생각해볼 문제</h1>

<p>저는 오늘 스터디에서 질문으로 본책 157쪽의 이 구문을 제시해보려고 해요</p>

<blockquote>
  <p>함수 이름은 함수 몸체 내에서만 참조할 수 있는 식별자이다</p>

</blockquote>

<blockquote>
  <p>함수 이름은 생략할 수 있다. 이름이 있는 함수를 기명 함수, 이름이 없는 함수를 무명/익명 함수라고 한다</p>

</blockquote>

<p>이거에 대해서 한번 이야기를 해보면 좋을 것 같아요. 부가적인 정보가 없었기에 좀 더 살펴보면 좋을 것 같아서요:)</p>

<p>이렇게 스터디 준비를 마쳐보았는데요, 오늘 스터디에는 다른 주제도 있어서 지식 공유가 정말 풍부할 것 같아요. 벌써부터 설레는걸요! 😄🎉 그럼 저는 이만 가볼게요! 안녕 👋😊</p>]]></content><author><name>insidepixce</name></author><category term="49challenge" /><summary type="html"><![CDATA[오늘 49일 챌린지에서는 함수에 대해서 공부해보았는데요, 양이 너무 많아가지고 12과인 함수 전부 공부하지 않고 12과 12.3까지 공부하도록 했어요. ✍️📚]]></summary></entry><entry><title type="html">git 마스터 1편 - 깃에 관하여,그리고 기본 사용법</title><link href="/insidepixce-blog/html-css/2024/08/27/git/" rel="alternate" type="text/html" title="git 마스터 1편 - 깃에 관하여,그리고 기본 사용법" /><published>2024-08-27T23:09:00-09:00</published><updated>2024-08-27T23:09:00-09:00</updated><id>/insidepixce-blog/html-css/2024/08/27/git</id><content type="html" xml:base="/insidepixce-blog/html-css/2024/08/27/git/"><![CDATA[<p>오늘은 오즈코딩 6일차! 🎉 깃에 대해 배워볼 차례인데요. 깃에 관하여, 그리고 vs code에서 기본적으로 어떻게 연동해서 사용하는지 알아봤어요. 강의를 듣다가 기억에 남은 점들과 전반적인 강의 내용을 정리해봤어요 😊</p>

<h1 id="깃git-기본-개념-">깃(Git) 기본 개념 🧩</h1>

<ul>
  <li><strong>깃(Git)</strong>은 개발자들이 소스 코드를 효율적으로 관리할 수 있도록 도와주는 <strong>버전 관리 시스템</strong>이에요. 쉽게 말하면, 프로젝트의 모든 변경 사항을 기록하고, 필요할 때 특정 시점으로 돌아갈 수 있게 해주는 타임머신 같은 역할을 한다고 생각하면 돼요! ⏳</li>
</ul>

<h3 id="깃이-뭐하는-건가요-">깃이 뭐하는 건가요? 🤔</h3>

<p>깃은 여러분이 코드 작업을 하면서 생기는 모든 변경 사항을 추적하고, 이를 <strong>커밋(commit)</strong>이라는 단위로 저장해줘요. 커밋은 마치 프로젝트의 “스냅샷” 같은 거예요. (스냅샷이 뭔지는 이따 설명해볼게요!) 그래서 깃을 사용하면 코드가 어떻게 변화해왔는지, 누가 어떤 변경을 했는지, 언제 했는지를 모두 알 수 있답니다! 🔍</p>

<h3 id="깃의-목적-">깃의 목적 🎯</h3>

<p>깃의 가장 큰 목적은 <strong>코드의 버전 관리</strong>를 통해 개발 프로세스를 효율적으로 만드는 거예요. 깃을 사용하면 여러 개발자들이 동시에 작업할 수 있고, 각자의 작업을 병합(merge)하거나, 필요할 때는 과거의 특정 버전으로 되돌아갈 수 있어요. 또한, 깃은 프로젝트를 다양한 브랜치로 나눠서 관리할 수 있게 해주기 때문에, 새로운 기능을 개발하거나 실험할 때도 기존 코드에 영향을 주지 않고 작업할 수 있답니다! 🚀</p>

<h3 id="깃의-주요-특징-️">깃의 주요 특징 ⭐️</h3>

<ol>
  <li>
    <p><strong>분산 버전 관리 시스템</strong></p>

    <p>깃은 중앙 서버 없이도 각 개발자가 자신의 로컬 컴퓨터에서 프로젝트 전체를 관리할 수 있는 분산형 시스템이에요. 이 덕분에 인터넷 연결이 없어도 작업할 수 있고, 다른 개발자와 쉽게 협업할 수 있죠!</p>
  </li>
  <li>
    <p><strong>브랜치와 병합</strong></p>

    <p>깃의 가장 강력한 기능 중 하나는 브랜치(branch)를 쉽게 만들고 병합(merge)할 수 있다는 거예요. 브랜치를 사용하면 서로 다른 기능이나 버그 수정을 독립적으로 개발할 수 있고, 나중에 이들을 하나로 합칠 때도 매우 쉽게 할 수 있어요. 🛠️</p>
  </li>
  <li>
    <p><strong>변경 이력 추적</strong></p>

    <p>깃은 모든 변경 사항을 커밋으로 기록하기 때문에, 누가 언제 어떤 파일을 수정했는지 정확히 추적할 수 있어요. 이력(log)을 확인하면서 코드가 어떻게 발전해왔는지 이해할 수 있죠. 📜</p>
  </li>
  <li>
    <p><strong>복구와 롤백</strong></p>

    <p>실수로 코드를 잘못 수정했다면? 걱정 마세요! 깃을 사용하면 과거의 특정 시점으로 되돌아가거나, 실수로 삭제한 파일을 복구할 수 있어요. 깃은 항상 여러분의 백업을 준비하고 있어요! 😌</p>
  </li>
</ol>

<h1 id="깃-스냅샷이-뭐야-">깃 스냅샷이 뭐야? 🤔</h1>

<p><strong>깃 스냅샷 (Git Snapshot)</strong></p>

<p>깃에서 “스냅샷”이란, 특정 시점에 소스 코드의 상태를 저장한 거예요. 우리가 커밋을 할 때마다, 그 순간의 파일 시스템 상태를 “스냅샷”으로 기록해 두는 거죠 📸</p>

<p><strong>목적:</strong> 이 스냅샷을 통해 소스 코드의 버전을 관리하고, 코드가 시간에 따라 어떻게 변해왔는지 추적할 수 있어요 🔍 필요하면 예전 상태로 되돌릴 수도 있답니다 ⏪</p>

<p><strong>사용 방식:</strong> 코드를 수정하고 커밋하면, 깃은 그때그때 스냅샷을 생성해줘요. 이렇게 생성된 스냅샷 덕분에 코드의 특정 시점으로 돌아가는 게 가능해요! 🕰️</p>

<hr />

<p><strong>도커 이미지 (Docker Image)</strong></p>

<p>도커 이미지는 응용 프로그램과 그 응용 프로그램이 필요로 하는 모든 종속성(라이브러리, 환경 설정 등)을 포함한 파일 시스템의 스냅샷이에요 🛠️ 이 이미지를 바탕으로 도커 컨테이너가 실행된답니다 🚀</p>

<p><strong>목적:</strong> 도커 이미지는 애플리케이션이 어디서나 동일한 환경에서 실행되도록 보장해줘요 🌍 덕분에 개발, 테스트, 배포가 훨씬 수월해진답니다. “한 번 구축하고 어디서나 실행!”하는 게 가능해요 🎯</p>

<p><strong>사용 방식:</strong> 개발자는 도커파일(Dockerfile)을 작성하고, 이를 기반으로 도커 이미지를 만들어줘요. 이 이미지는 애플리케이션을 실행하는 데 필요한 모든 요소를 포함하고 있어서, 컨테이너 실행 시 그대로 사용될 수 있어요 📦</p>

<hr />

<p><strong>주요 차이점</strong> ⚖️</p>

<ul>
  <li><strong>대상:</strong> 깃 스냅샷은 주로 소스 코드나 문서 같은 텍스트 파일을 대상으로 하지만, 도커 이미지는 애플리케이션 실행에 필요한 모든 걸 포함해요 🗂️</li>
  <li><strong>목적:</strong> 깃 스냅샷은 코드의 버전 관리에 중점을 두지만, 도커 이미지는 애플리케이션 실행 환경의 이식성을 높이기 위한 거예요 🌐</li>
</ul>

<hr />

<p>요약하자면, 깃 스냅샷과 도커 이미지는 “스냅샷”이라는 공통점은 있지만, 그 목적과 활용 범위는 확실히 달라요 😊 깃 스냅샷은 코드의 버전 관리에, 도커 이미지는 애플리케이션 환경의 배포 및 관리에 사용된답니다! 🎉</p>

<h1 id="깃을-설치해보자">깃을 설치해보자!</h1>

<h2 id="1-홈브루-설치하기-">1. 홈브루 설치하기 🍺</h2>

<ul>
  <li>*홈브루(Homebrew)**는 macOS에서 사용할 수 있는 패키지 관리 도구예요. 쉽게 말해서, 프로그램을 설치하고 관리하는 데 정말 유용한 친구죠! 홈브루를 설치하려면, 터미널을 열고 아래 명령어를 입력하면 돼요:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
/bin/bash <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>

<p><img src="https://github.com/user-attachments/assets/ca95d11f-e853-4100-9e7e-e83dd3b85553" alt="스크린샷 2024-08-29 오후 12.00.28.png" /></p>

<p>이 명령어를 실행하면 홈브루가 설치되면서, 여러분의 맥이 더 강력해질 거예요! 😎
저는 지금 터미널이 조금 커스텀되어있어서 여러분들의 화면이랑 조금 다르게 보일거랍니다!</p>

<h3 id="아-수도-권한-">😱아 ! 수도 권한 !</h3>

<p><img src="https://github.com/user-attachments/assets/98169930-4c43-496f-8585-81fcaa4eca99" alt="스크린샷 2024-08-29 오후 12.01.14.png" /></p>

<p>비밀번호를 입력했는데 비밀번호가 뜨지도 않고… 어떤 비밀번호인지도 궁금하시죠?</p>

<p>그냥 맥 잠금해제할때 뜨는 비밀번호를 입력하시면 돼요!</p>

<p>그리고! 입력해도 아무 반응 없는게 정상입니다 🙂</p>

<p>그냥 다 치시고 엔터 쳐주시면 돼요!</p>

<hr />

<h2 id="2-깃-초기-설정하기-">2. 깃 초기 설정하기 🌱</h2>

<p>깃(Git)을 설치한 후, 여러분의 이름과 이메일 주소를 설정해야 해요. 이 정보는 나중에 커밋할 때 기록되니까 꼭 설정해줘야 해요!</p>

<p>터미널에서 아래 명령어를 차례로 입력해 주세요:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> user.name <span class="s2">"Your Name"</span>
git config <span class="nt">--global</span> user.email <span class="s2">"your.email@example.com"</span>

</code></pre></div></div>

<p>이렇게 하면 깃이 여러분을 기억해줘요. 이제 여러분이 커밋할 때마다 이름과 이메일이 함께 저장된답니다! 🎉</p>

<hr />

<h2 id="3-vscode와-깃-연결하기-">3. VSCode와 깃 연결하기 🔗</h2>

<p>이제 <strong>VSCode(Visual Studio Code)</strong>를 깃과 연결해 볼 차례예요. 깃을 설치한 후, VSCode가 깃을 인식하도록 설정을 해줘야 해요.</p>

<ol>
  <li><strong>VSCode 열기:</strong> 먼저 VSCode를 열어주세요. (홈브루로 설치하셨다면, 터미널에 <code class="language-plaintext highlighter-rouge">code .</code>을 입력해도 VSCode가 열려요!)</li>
  <li><strong>깃 익스텐션 확인:</strong> VSCode의 왼쪽 사이드바에서 <strong>확장 아이콘(Extensions)</strong>을 클릭하고, <code class="language-plaintext highlighter-rouge">Git</code> 확장 프로그램이 설치되어 있는지 확인해 주세요. 기본적으로 설치되어 있을 거예요.</li>
  <li><strong>레포지토리 열기:</strong> 깃 레포지토리를 로컬에 클론했다면, VSCode에서 해당 폴더를 열면 자동으로 깃과 연결돼요. 파일이 변경되면 왼쪽 사이드바에 깃 상태가 나타날 거예요.</li>
</ol>

<p>이제 VSCode에서 깃을 편리하게 사용하며 코드 작업을 할 수 있어요! 🖥️</p>

<hr />

<p>이렇게 홈브루 설치부터 깃 초기 설정, VSCode 연결까지 마쳤어요!</p>

<p>이제 실습과제를 풀어볼까요?</p>

<h1 id="실습해보자">실습해보자!</h1>

<hr />

<h3 id="실습-과제-1-로컬-저장소-초기화-및-기본적인-커밋-">실습 과제 1: 로컬 저장소 초기화 및 기본적인 커밋 🚀</h3>

<ol>
  <li>
    <p><strong>새로운 프로젝트 폴더 생성 및 Git 초기화</strong></p>

    <p>먼저, 터미널을 열고 새로운 프로젝트 폴더를 하나 만들어 주세요. 그런 다음, 그 폴더로 이동해서 Git 저장소를 초기화할게요:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">mkdir </span>my-project
 <span class="nb">cd </span>my-project
 git init
    
</code></pre></div>    </div>

    <p>이제 이 폴더는 깃이 관리하는 저장소가 되었어요! 🎉</p>

    <p>여기서 my-project는 폴더명으로 , 원하시는대로 바꿔주셔도 돼요!</p>

    <p>cd는 파일 위치를 옮긴다는 거고요, git init은 깃 저장소를 초기화 즉 세팅한다고 생각해주시면 돼요.</p>

    <p><img src="https://github.com/user-attachments/assets/9fb2d1d4-2582-4d95-ad45-2756ea1628b4" alt="스크린샷 2024-08-29 오후 12.08.43.png" /></p>

    <p>저는 vscode의 터미널 안에서 진행했는데요! 파일 경로를 잘 확인하는 습관을 들이면 좋겠죠!</p>

    <p><img src="https://github.com/user-attachments/assets/db642f43-3be3-4fcc-9f01-2cd30a7c8d85" alt="스크린샷 2024-08-29 오후 12.09.36.png" /></p>

    <p>이렇게 my-project가 생긴걸 볼 수 있어요!</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">README.md</code> 파일 만들기</strong></p>

    <p>이제 프로젝트 설명을 담은 <code class="language-plaintext highlighter-rouge">README.md</code> 파일을 만들어볼게요. 터미널에 아래 명령어를 입력해 주세요:
 물론 하나하나 파일을 만들고 거기에 입력해도 되지만, 개발자는 뭐니뭐니해도 효율이잖아요!</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">echo</span> <span class="s2">"# 부정적인 생각은 그만"</span> <span class="o">&gt;</span> README.md
    
</code></pre></div>    </div>

    <p><img src="https://github.com/user-attachments/assets/2e007629-f6df-4e5a-8149-0a36fb1eaa1e" alt="스크린샷 2024-08-29 오후 12.12.39.png" /></p>

    <p><img src="https://github.com/user-attachments/assets/0dff7ce0-f81b-469e-96a1-4077a04a1c60" alt="스크린샷 2024-08-29 오후 12.13.01.png" /></p>

    <p><img src="https://github.com/user-attachments/assets/4aa273b2-81f4-48a6-89b7-f6c78f8ecf82" alt="스크린샷 2024-08-29 오후 12.12.48.png" /></p>

    <p>잘 만들어졌군요!</p>

    <ul>
      <li><strong>마크다운(Markdown) 설명:</strong>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">#</code>을 사용하면 큰 제목을 만들 수 있어요!</li>
          <li><code class="language-plaintext highlighter-rouge">##</code>을 사용하면 중간 크기의 제목이 만들어져요.</li>
          <li><code class="language-plaintext highlighter-rouge">텍스트*</code> 또는 <code class="language-plaintext highlighter-rouge">_텍스트_</code>로 이탤릭체를 만들고, <code class="language-plaintext highlighter-rouge">*텍스트**</code>나 <code class="language-plaintext highlighter-rouge">__텍스트__</code>로 굵게 표시할 수 있답니다!</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>스테이징 및 첫 커밋</strong></p>

    <p>이제 <code class="language-plaintext highlighter-rouge">README.md</code> 파일을 Git에 스테이징하고, 첫 커밋을 만들어볼게요:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> git add README.md
 git commit <span class="nt">-m</span> <span class="s2">"첫 커밋"</span>
    
</code></pre></div>    </div>

    <p><img src="https://github.com/user-attachments/assets/163b125b-e807-452c-bdfc-aa776664eda7" alt="스크린샷 2024-08-29 오후 12.14.10.png" /></p>

    <p>사실 이렇게 해도 되지만,</p>

    <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nx">git</span> <span class="nx">add</span> <span class="p">.</span>
</code></pre></div>    </div>

    <p>이거는 현재 변경사항 모두를 스테이징한다는 뜻이에요.</p>

    <p>이게 사실 저는 더 편하더라구요.</p>

    <p>암튼 , 두 번째까지 마쳐주면</p>

    <p><img src="https://github.com/user-attachments/assets/2bfa07ee-cca0-454b-8045-35d6555fbcdc" alt="스크린샷 2024-08-29 오후 12.15.26.png" /></p>

    <p>축하해요! 여러분의 첫 커밋이 저장되었어요! 🥳</p>
  </li>
  <li>
    <p><strong>현재 상태 확인</strong></p>

    <p>마지막으로, 현재 Git 상태를 확인해볼까요?:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> git status
    
</code></pre></div>    </div>

    <p><img src="https://github.com/user-attachments/assets/5b2f9a8d-e43f-46b7-959a-5a3618ba4603" alt="스크린샷 2024-08-29 오후 12.15.42.png" /></p>

    <p>이제 깃이 제대로 작동하고 있는지 확인할 수 있어요. 아주 잘 하고 있어요! 👍</p>
  </li>
</ol>

<hr />

<h3 id="실습-과제-2-브랜치와-병합-연습-">실습 과제 2: 브랜치와 병합 연습 🌿</h3>

<ol>
  <li>
    <p><strong>새로운 브랜치 생성 및 전환</strong></p>

    <p>이제 <code class="language-plaintext highlighter-rouge">feature</code>라는 새로운 브랜치를 만들어보세요. 브랜치는 독립적인 작업 공간을 제공해서, 안전하게 새로운 기능을 개발할 수 있어요:</p>

    <p><img src="https://github.com/user-attachments/assets/d361ba57-8342-48ca-869f-a8f7cb450822" alt="스크린샷 2024-08-29 오후 12.16.03.png" /></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> git checkout <span class="nt">-b</span> feature
    
</code></pre></div>    </div>

    <p>이제 여러분은 <code class="language-plaintext highlighter-rouge">feature</code> 브랜치에서 작업 중이에요! 🌟</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">index.html</code> 파일 만들기</strong></p>

    <p>다음으로, <code class="language-plaintext highlighter-rouge">index.html</code> 파일을 만들어 간단한 HTML 코드를 추가해볼게요:</p>

    <p><img src="https://github.com/user-attachments/assets/442d1dd0-7337-4217-b1a8-3f2169d7fbe2" alt="스크린샷 2024-08-29 오후 12.16.42.png" /></p>

    <p>아주 잘하고 있어요! 이제 이 파일을 커밋해봅시다! 💻</p>
  </li>
  <li>
    <p><strong>변경 사항 스테이징 및 커밋</strong></p>

    <p>변경 사항을 스테이징하고, 커밋하세요:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> git add <span class="nb">.</span>
 git commit <span class="nt">-m</span> <span class="s2">"Add index.html"</span>
    
</code></pre></div>    </div>

    <p>이렇게 하면, <code class="language-plaintext highlighter-rouge">feature</code> 브랜치에서 변경한 내용이 안전하게 저장되었어요!</p>

    <p><img src="https://github.com/user-attachments/assets/2d38950d-ea69-4756-b931-1339ccf9c992" alt="스크린샷 2024-08-29 오후 12.17.11.png" /></p>
  </li>
  <li>
    <p><strong>메인 브랜치로 돌아가기</strong></p>

    <p>이제 <code class="language-plaintext highlighter-rouge">mastergit</code>  브랜치로 돌아가볼까요? 메인 브랜치에서 계속 작업할 수 있어요:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> git checkout master
    
</code></pre></div>    </div>

    <p><img src="https://github.com/user-attachments/assets/7d82a06f-a28f-4cae-b6df-1ab167409e41" alt="스크린샷 2024-08-29 오후 12.18.11.png" /></p>
  </li>
  <li>
    <p><strong>병합하기</strong></p>

    <p><code class="language-plaintext highlighter-rouge">feature</code> 브랜치에서 작업한 내용을 <code class="language-plaintext highlighter-rouge">main</code> 브랜치로 병합해보세요:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> git merge feature
    
</code></pre></div>    </div>

    <p><img src="https://github.com/user-attachments/assets/46aad9e8-8dc4-4b3b-91af-ae4ea2cf1a7a" alt="스크린샷 2024-08-29 오후 12.18.27.png" /></p>

    <p>두 브랜치가 합쳐지면서, 이제 <code class="language-plaintext highlighter-rouge">main</code> 브랜치에 모든 최신 기능이 반영되었답니다! 🎉</p>
  </li>
  <li>
    <p><strong>커밋 이력 확인</strong></p>

    <p>마지막으로 <code class="language-plaintext highlighter-rouge">git log</code> 명령어로 커밋 이력을 확인해보세요. 여러분이 작업한 모든 내용이 잘 병합되었는지 볼 수 있어요:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> git log
    
</code></pre></div>    </div>

    <p><img src="https://github.com/user-attachments/assets/d1ae089b-8720-4402-99b1-55b8fa1cf708" alt="스크린샷 2024-08-29 오후 12.18.51.png" /></p>

    <p>정말 잘했어요! 😄</p>

    <p>아, 이 화면에서 빠져나오려면 q를 누르면 돼요!</p>
  </li>
</ol>

<hr />

<h3 id="실습-과제-3-git에서-파일-관리-">실습 과제 3: Git에서 파일 관리 📂</h3>

<ol>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">temp.txt</code> 파일 커밋</strong></p>

    <p>먼저 <code class="language-plaintext highlighter-rouge">temp.txt</code>라는 파일을 만들어볼게요. 그런 다음, Git에 스테이징하고 커밋해 주세요:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">echo</span> <span class="s2">"Temporary file content"</span> <span class="o">&gt;</span> temp.txt
 git add temp.txt
 git commit <span class="nt">-m</span> <span class="s2">"Add temp.txt"</span>
    
</code></pre></div>    </div>

    <p><img src="https://github.com/user-attachments/assets/0710d130-6e45-43a7-a771-4a806ff38ec9" alt="스크린샷 2024-08-29 오후 12.20.12.png" /></p>
  </li>
  <li>
    <p><strong>파일 삭제 및 커밋</strong></p>

    <p>이제 <code class="language-plaintext highlighter-rouge">temp.txt</code> 파일을 삭제하고, Git에서 이 파일을 제거한 후 다시 커밋해보세요:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">rm </span>temp.txt
 git <span class="nb">rm </span>temp.txt
 git commit <span class="nt">-m</span> <span class="s2">"Remove temp.txt"</span>
    
</code></pre></div>    </div>

    <p><img src="https://github.com/user-attachments/assets/30fc2d53-2364-447c-888d-03ea499620a6" alt="스크린샷 2024-08-29 오후 12.20.28.png" /></p>

    <p>이 파일이 깃에서 완전히 삭제되었어요!</p>
  </li>
  <li>
    <p><strong>파일 복구</strong></p>

    <p>만약 실수로 파일을 삭제했다면, 걱정 마세요! <code class="language-plaintext highlighter-rouge">git reset --hard</code> 또는 <code class="language-plaintext highlighter-rouge">git checkout HEAD temp.txt</code> 명령어로 파일을 복구할 수 있어요:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> git checkout HEAD^ temp.txt
    
</code></pre></div>    </div>

    <p><img src="https://github.com/user-attachments/assets/d8feb293-16e5-4590-8a76-0a882987d9a3" alt="스크린샷 2024-08-29 오후 12.20.47.png" /></p>

    <p>깃은 언제나 여러분의 백업을 갖고 있으니 안심하세요! 😊</p>
  </li>
</ol>

<hr />

<h3 id="실습-과제-4-stash와-rebase-연습-️">실습 과제 4: Stash와 Rebase 연습 🛠️</h3>

<ol>
  <li>
    <p><strong>작업 중인 상태에서 Stash 사용</strong></p>

    <p>작업을 하다가 다른 긴급한 작업을 해야 할 때가 있을 수 있어요. 이럴 때 <code class="language-plaintext highlighter-rouge">git stash</code> 명령어로 현재 작업 중인 내용을 임시 저장해두세요:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> git stash
    
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>긴급 작업 수행</strong></p>

    <p>이제 긴급 작업을 수행하세요. 필요한 파일을 수정하고, 커밋해 주세요. 작업이 끝나면 원래 작업으로 돌아갈 준비가 되었네요!</p>
  </li>
  <li>
    <p><strong>Stash 불러오기</strong></p>

    <p>긴급 작업이 끝나면, 아까 저장해둔 내용을 다시 불러올 수 있어요. <code class="language-plaintext highlighter-rouge">git stash apply</code> 명령어를 사용해 주세요:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> git stash apply
    
</code></pre></div>    </div>

    <p>다시 작업을 이어갈 수 있어요! 👍</p>
  </li>
  <li>
    <p><strong>Rebase로 브랜치 동기화</strong></p>

    <p><code class="language-plaintext highlighter-rouge">feature</code> 브랜치에서 작업 중이라면, <code class="language-plaintext highlighter-rouge">git rebase main</code> 명령어로 <code class="language-plaintext highlighter-rouge">main</code> 브랜치의 최신 변경 사항을 반영해보세요:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> git checkout feature
 git rebase main
    
</code></pre></div>    </div>

    <p>깔끔하게 브랜치가 동기화되었답니다! 😎</p>
  </li>
</ol>

<hr />

<h3 id="실습-과제-5-cherry-pick을-활용한-특정-커밋-적용-">실습 과제 5: Cherry-pick을 활용한 특정 커밋 적용 🍒</h3>

<ol>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">feature-branch</code>에서 커밋 만들기</strong></p>

    <p><code class="language-plaintext highlighter-rouge">feature-branch</code>에서 여러 개의 커밋을 만들어보세요. 각 커밋은 독립적인 기능이나 수정 사항을 담고 있어요:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> git checkout <span class="nt">-b</span> feature-branch
 <span class="nb">echo</span> <span class="s2">"First feature"</span> <span class="o">&gt;</span> feature1.txt
 git add feature1.txt
 git commit <span class="nt">-m</span> <span class="s2">"Add first feature"</span>
    
 <span class="nb">echo</span> <span class="s2">"Second feature"</span> <span class="o">&gt;</span> feature2.txt
 git add feature2.txt
 git commit <span class="nt">-m</span> <span class="s2">"Add second feature"</span>
    
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>특정 커밋 선택 후 적용</strong></p>

    <p>이제 그중 특정 커밋만 골라서 <code class="language-plaintext highlighter-rouge">main</code> 브랜치에 적용해볼까요? <code class="language-plaintext highlighter-rouge">git cherry-pick &lt;commit-hash&gt;</code> 명령어를 사용하면, 해당 커밋만 <code class="language-plaintext highlighter-rouge">main</code> 브랜치에 적용할 수 있어요:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> git checkout main
 git cherry-pick &lt;commit-hash&gt;
    
</code></pre></div>    </div>

    <p>원하는 부분만 쏙쏙 골라서 적용할 수 있는 정말 유용한 기능이죠! 🍒</p>
  </li>
</ol>

<hr />

<p>이렇게 실습 과제를 모두 마치셨다면, 깃의 기본적인 기능들을 거의 다 익히신 거예요! 앞으로도 깃을 활용해서 멋진 프로젝트를 관리해보세요. 언제든지 궁금한 게 있으면 물어보세요! 😊✨</p>]]></content><author><name>insidepixce</name></author><category term="html-css" /><summary type="html"><![CDATA[오늘은 오즈코딩 6일차! 🎉 깃에 대해 배워볼 차례인데요. 깃에 관하여, 그리고 vs code에서 기본적으로 어떻게 연동해서 사용하는지 알아봤어요. 강의를 듣다가 기억에 남은 점들과 전반적인 강의 내용을 정리해봤어요 😊]]></summary></entry><entry><title type="html">[5]미디어 쿼리</title><link href="/insidepixce-blog/html-css/2024/08/27/%EB%AF%B8%EB%94%94%EC%96%B4%EC%BF%BC%EB%A6%AC/" rel="alternate" type="text/html" title="[5]미디어 쿼리" /><published>2024-08-27T19:42:00-09:00</published><updated>2024-08-27T19:42:00-09:00</updated><id>/insidepixce-blog/html-css/2024/08/27/%EB%AF%B8%EB%94%94%EC%96%B4%EC%BF%BC%EB%A6%AC</id><content type="html" xml:base="/insidepixce-blog/html-css/2024/08/27/%EB%AF%B8%EB%94%94%EC%96%B4%EC%BF%BC%EB%A6%AC/"><![CDATA[<p>오늘은 오즈코딩스쿨 🖐🏻일차! 🎨<strong>미디어 쿼리</strong>에 관해서 배워보았어요! 열심히 공부한 내용들을 블로그에 정리하는 게 참 재밌는 것 같아요. 그럼 가볼까요?</p>

<h1 id="-미디어-쿼리-완벽-가이드-반응형-웹-디자인의-핵심-개념들-">🎨 미디어 쿼리 완벽 가이드: 반응형 웹 디자인의 핵심 개념들 💻</h1>

<p>오늘날 웹사이트는 다양한 디바이스에서 사용되고 있어, 사용자의 화면 크기, 해상도, 플랫폼에 맞춰 디자인이 유연하게 조정되는 <strong>반응형 웹 디자인</strong>이 필수로 자리 잡았어요. 오늘은 그 반응형 웹 디자인의 중요한 요소 중 하나인 <strong>미디어 쿼리</strong>에 대해 알아볼게요! 🎉</p>

<h2 id="1️⃣미디어-쿼리란-무엇인가">1️⃣ <strong>미디어 쿼리란 무엇인가?</strong></h2>

<p>미디어 쿼리는 웹 페이지의 스타일을 특정 조건에 맞춰 조정할 수 있게 도와주는 <strong>CSS 기능</strong>이에요. 🎨</p>

<ul>
  <li>기본적으로 화면 크기나 해상도 등 사용자 환경에 따라 다른 스타일을 적용할 수 있어요.</li>
</ul>

<p>→ 작은 화면과 큰 화면에서 같은 웹 페이지라도 각각 다른 스타일을 제공해 더 편리한 시각적 경험을 제공할 수 있답니다! 📱➡️💻</p>

<hr />

<h2 id="2️⃣media-규칙의-기본-구조">2️⃣ <strong><code class="language-plaintext highlighter-rouge">@media</code> 규칙의 기본 구조</strong></h2>

<p><code class="language-plaintext highlighter-rouge">@media</code> 규칙은 특정 조건이 충족될 때만 CSS 스타일을 적용할 수 있게 하는 기능이에요. ⚙️</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">media</span> <span class="p">(</span><span class="nx">조건</span><span class="p">)</span> <span class="p">{</span>
<span class="cm">/* 조건이 충족되면 적용될 스타일 */</span>
<span class="p">}</span>

</code></pre></div></div>

<h3 id="-조건의-유형">✅ <strong>조건의 유형</strong></h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">width</code>, <code class="language-plaintext highlighter-rouge">height</code> : 화면의 너비/높이에 따라 스타일을 다르게 적용 🎯</li>
  <li><code class="language-plaintext highlighter-rouge">resolution</code> : 해상도 조건을 기준으로 스타일을 조정 🖥️</li>
</ul>

<hr />

<h2 id="3️⃣min-width-및-max-width">3️⃣ <strong><code class="language-plaintext highlighter-rouge">min-width</code> 및 <code class="language-plaintext highlighter-rouge">max-width</code></strong></h2>

<p><code class="language-plaintext highlighter-rouge">min-width</code>와 <code class="language-plaintext highlighter-rouge">max-width</code>를 사용하면 화면 크기에 맞춰 스타일을 유연하게 조정할 수 있어요! 📐</p>

<p>모바일에서는 간단한 레이아웃을 제공하고, 화면이 클수록 더 복잡한 레이아웃을 제공할 수 있어요. 📱➡️💻</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 작은 화면용 */</span>
<span class="p">@</span><span class="nd">media</span> <span class="p">(</span><span class="nx">max</span><span class="o">-</span><span class="nx">width</span><span class="p">:</span> <span class="mi">480</span><span class="nx">px</span><span class="p">)</span> <span class="p">{</span>
  <span class="p">.</span><span class="nx">container</span> <span class="p">{</span>
    <span class="nx">flex</span><span class="o">-</span><span class="nx">direction</span><span class="p">:</span> <span class="nx">column</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="cm">/* 중간 화면용 */</span>
<span class="p">@</span><span class="nd">media</span> <span class="p">(</span><span class="nx">min</span><span class="o">-</span><span class="nx">width</span><span class="p">:</span> <span class="mi">481</span><span class="nx">px</span><span class="p">)</span> <span class="nf">and </span><span class="p">(</span><span class="nx">max</span><span class="o">-</span><span class="nx">width</span><span class="p">:</span> <span class="mi">1024</span><span class="nx">px</span><span class="p">)</span> <span class="p">{</span>
  <span class="p">.</span><span class="nx">container</span> <span class="p">{</span>
    <span class="nx">flex</span><span class="o">-</span><span class="nx">direction</span><span class="p">:</span> <span class="nx">row</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<hr />

<h2 id="4️⃣min-resolution---고해상도-️">4️⃣ <strong><code class="language-plaintext highlighter-rouge">min-resolution</code> - 고해상도</strong> 🖼️</h2>

<p>고해상도 디바이스에서는 저해상도 이미지를 사용할 경우, 이미지가 뭉개져 보일 수 있어요. 이때 <code class="language-plaintext highlighter-rouge">min-resolution</code>을 사용해 더 선명한 이미지를 제공할 수 있답니다! 🖌️</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">media</span> <span class="p">(</span><span class="nx">min</span><span class="o">-</span><span class="nx">resolution</span><span class="p">:</span> <span class="mi">2</span><span class="nx">dppx</span><span class="p">)</span> <span class="p">{</span>
  <span class="p">.</span><span class="nx">image</span> <span class="p">{</span>
    <span class="nx">background</span><span class="o">-</span><span class="nx">image</span><span class="p">:</span> <span class="nf">url</span><span class="p">(</span><span class="dl">'</span><span class="s1">high-resolution-image.png</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<hr />

<h2 id="5️⃣모바일-우선-접근법-️">5️⃣ <strong>모바일 우선 접근법</strong> 📱➡️💻</h2>

<p>👉 기본 스타일을 <strong>모바일</strong>에 맞추고, 화면이 커질수록 점진적으로 스타일을 확장할 수 있어요.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="cm">/* 기본적으로 모바일용 스타일 */</span>
<span class="nx">body</span> <span class="p">{</span>
  <span class="nx">font</span><span class="o">-</span><span class="nx">size</span><span class="p">:</span> <span class="mi">14</span><span class="nx">px</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/* 태블릿 이상에서는 폰트 크기를 키움 */</span>
<span class="p">@</span><span class="nd">media</span> <span class="p">(</span><span class="nx">min</span><span class="o">-</span><span class="nx">width</span><span class="p">:</span> <span class="mi">768</span><span class="nx">px</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">body</span> <span class="p">{</span>
    <span class="nx">font</span><span class="o">-</span><span class="nx">size</span><span class="p">:</span> <span class="mi">16</span><span class="nx">px</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="cm">/* 데스크탑 이상에서는 더 큰 폰트 */</span>
<span class="p">@</span><span class="nd">media</span> <span class="p">(</span><span class="nx">min</span><span class="o">-</span><span class="nx">width</span><span class="p">:</span> <span class="mi">1200</span><span class="nx">px</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">body</span> <span class="p">{</span>
    <span class="nx">font</span><span class="o">-</span><span class="nx">size</span><span class="p">:</span> <span class="mi">18</span><span class="nx">px</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<hr />

<h2 id="6️⃣calc-함수-">6️⃣ <strong><code class="language-plaintext highlighter-rouge">calc()</code> 함수</strong> 🧮</h2>

<p><code class="language-plaintext highlighter-rouge">calc()</code> 함수는 <strong>CSS에서 요소의 크기를 동적으로 계산</strong>할 수 있는 기능이에요!</p>

<p>→ 예를 들어, 요소의 너비를 화면 크기의 50%로 설정하되 일부 여백을 빼고 싶을 때 사용할 수 있어요! 😎</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="p">.</span><span class="nx">element</span><span class="p">{</span>
	<span class="nl">width</span><span class="p">:</span> <span class="nf">calc</span><span class="p">(</span><span class="mi">100</span><span class="o">%</span> <span class="o">-</span> <span class="mi">20</span><span class="nx">px</span><span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>

<hr />

<h2 id="7️⃣미디어-쿼리가-너무-많아지면-">7️⃣ <strong>미디어 쿼리가 너무 많아지면?</strong> 🕑</h2>

<p>미디어 쿼리가 많아지면 <strong>브라우저가 스타일을 계산하는 시간이 늘어날 수</strong> 있어요. 💨</p>

<p>→ 복잡한 레이아웃의 경우 비효율적이어서 <strong>렌더링 시간</strong>이 오래 걸릴 수 있죠. 🚦</p>

<blockquote>
  <p>불필요한 미디어 쿼리를 줄이고, CSS를 효율적으로 관리하는 것이 중요해요! ✂️</p>

</blockquote>

<hr />

<p>💡 <strong>비슷한 크기 범위의 미디어 쿼리 통합</strong></p>

<p>💡 <strong>공통 스타일 재사용</strong></p>

<hr />

<h2 id="8️⃣prefers-color-scheme-다크-모드-">8️⃣ <strong><code class="language-plaintext highlighter-rouge">prefers-color-scheme</code> (다크 모드)</strong> 🌑</h2>

<p>사용자가 <strong>다크 모드</strong>를 선호하는지에 따라 스타일을 자동으로 변경할 수 있는 <code class="language-plaintext highlighter-rouge">prefers-color-scheme</code>은 최신 CSS 기능 중 하나예요! 🌟</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">media</span> <span class="p">(</span><span class="nx">prefers</span><span class="o">-</span><span class="nx">color</span><span class="o">-</span><span class="nx">scheme</span><span class="p">:</span> <span class="nx">dark</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">body</span> <span class="p">{</span>
    <span class="nx">background</span><span class="o">-</span><span class="nx">color</span><span class="p">:</span> <span class="nx">black</span><span class="p">;</span>
    <span class="nl">color</span><span class="p">:</span> <span class="nx">white</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>이렇게 하면 사용자가 다크 모드를 설정했을 때 자동으로 스타일이 변경돼요! 🎨✨</p>

<hr />

<h2 id="9️⃣android와-ios에서의-미디어-쿼리-사용-방식-dpi-vs-dppx-">9️⃣ <strong>Android와 iOS에서의 미디어 쿼리 사용 방식</strong> (DPI vs DPPX) 📱</h2>

<p>Android와 iOS는 해상도를 처리하는 방식이 달라요!</p>

<p>Android는 <strong>DPI (Dots Per Inch)</strong>를 사용하고, iOS는 <strong>DPPX (Dots Per Pixel)</strong>를 사용하죠. ⚙️</p>

<p>👋🏻 <strong>고해상도 기기를 위해 각 플랫폼에 맞춰 미디어 쿼리를 작성해보세요!</strong></p>

<ul>
  <li><strong>Android 기준 (DPI)</strong></li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="p">@</span><span class="nd">media</span> <span class="p">(</span><span class="nx">min</span><span class="o">-</span><span class="nx">resolution</span><span class="p">:</span> <span class="mi">192</span><span class="nx">dpi</span><span class="p">)</span> <span class="p">{</span>
  <span class="cm">/* 고해상도 이미지 */</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li><strong>iOS 기준 (DPPX)</strong></li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="p">@</span><span class="nd">media</span> <span class="p">(</span><span class="nx">min</span><span class="o">-</span><span class="nx">resolution</span><span class="p">:</span> <span class="mi">2</span><span class="nx">dppx</span><span class="p">)</span> <span class="p">{</span>
  <span class="cm">/* 고해상도 이미지 */</span>
<span class="p">}</span>

</code></pre></div></div>

<p>각 플랫폼에 맞게 미디어 쿼리를 적용해야 더 나은 사용자 경험을 제공할 수 있어요! 🏆</p>

<hr />

<p>이렇게 미디어 쿼리와 관련된 주요 개념과 활용법을 살펴보았습니다! ✨</p>

<p><strong>반응형 웹 디자인</strong>에서 중요한 역할을 하는 미디어 쿼리는 다양한 기기와 사용자 환경에 맞춰 웹사이트를 유연하게 만들 수 있는 중요한 도구예요! 😊</p>

<p>💡 앞으로도 미디어 쿼리를 잘 활용해 <strong>더 나은 웹 경험</strong>을 제공할 수 있도록 해봐요!</p>

<hr />

<h1 id="-미디어-쿼리-사용-예제-더-다양하게-활용해보자-">🎨 <strong>미디어 쿼리 사용 예제: 더 다양하게 활용해보자!</strong> 💻</h1>

<p>미디어 쿼리는 단순히 배경색을 바꾸는 것뿐만 아니라, 다양한 용도로 활용될 수 있어요! 여기 몇 가지 예제를 통해 미디어 쿼리의 다양한 사용법을 함께 알아볼까요? ✨</p>

<hr />

<h2 id="1️⃣텍스트-크기-조정-"><strong>1️⃣ 텍스트 크기 조정</strong> 📝</h2>

<p>화면 크기에 따라 폰트 크기를 조정해 사용자가 더 쉽게 읽을 수 있도록 할 수 있어요!</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* 작은 화면에서는 더 작은 글씨 📱 */</span>
<span class="k">@media</span> <span class="p">(</span><span class="n">max-width</span><span class="p">:</span> <span class="m">600px</span><span class="p">)</span> <span class="p">{</span>
  <span class="nt">body</span> <span class="p">{</span>
    <span class="nl">font-size</span><span class="p">:</span> <span class="m">14px</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c">/* 중간 화면에서는 중간 크기 💻 */</span>
<span class="k">@media</span> <span class="p">(</span><span class="n">min-width</span><span class="p">:</span> <span class="m">601px</span><span class="p">)</span> <span class="n">and</span> <span class="p">(</span><span class="n">max-width</span><span class="p">:</span> <span class="m">1024px</span><span class="p">)</span> <span class="p">{</span>
  <span class="nt">body</span> <span class="p">{</span>
    <span class="nl">font-size</span><span class="p">:</span> <span class="m">16px</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c">/* 큰 화면에서는 더 큰 글씨 🖥️ */</span>
<span class="k">@media</span> <span class="p">(</span><span class="n">min-width</span><span class="p">:</span> <span class="m">1025px</span><span class="p">)</span> <span class="p">{</span>
  <span class="nt">body</span> <span class="p">{</span>
    <span class="nl">font-size</span><span class="p">:</span> <span class="m">18px</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<hr />

<h2 id="2️⃣레이아웃-변화-️"><strong>2️⃣ 레이아웃 변화</strong> 🛠️</h2>

<p>화면 크기에 따라 레이아웃을 조정해보세요. 작은 화면에서는 세로 배치, 큰 화면에서는 가로 배치로 변경할 수 있답니다!</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* 모바일 화면에서는 세로 배치 📱 */</span>
<span class="k">@media</span> <span class="p">(</span><span class="n">max-width</span><span class="p">:</span> <span class="m">600px</span><span class="p">)</span> <span class="p">{</span>
  <span class="nc">.container</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
    <span class="nl">flex-direction</span><span class="p">:</span> <span class="n">column</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c">/* 데스크탑 화면에서는 가로 배치 💻 */</span>
<span class="k">@media</span> <span class="p">(</span><span class="n">min-width</span><span class="p">:</span> <span class="m">601px</span><span class="p">)</span> <span class="p">{</span>
  <span class="nc">.container</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
    <span class="nl">flex-direction</span><span class="p">:</span> <span class="n">row</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<hr />

<h2 id="3️⃣이미지-교체-️"><strong>3️⃣ 이미지 교체</strong> 🖼️</h2>

<p>고해상도 디바이스에서는 더 고품질의 이미지를 제공할 수 있어요. 미디어 쿼리를 사용해 해상도에 따라 이미지를 교체해보세요!</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* 고해상도 기기에서는 고해상도 이미지 사용 📸 */</span>
<span class="k">@media</span> <span class="p">(</span><span class="n">min-resolution</span><span class="p">:</span> <span class="m">2dppx</span><span class="p">)</span> <span class="p">{</span>
  <span class="nc">.logo</span> <span class="p">{</span>
    <span class="nl">background-image</span><span class="p">:</span> <span class="sx">url('logo-highres.png')</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<hr />

<h2 id="4️⃣-네비게이션-메뉴-변환-">4️⃣ <strong>네비게이션 메뉴 변환</strong> 🍔</h2>

<p>화면 크기에 따라 네비게이션 메뉴가 다른 방식으로 표시되도록 조정해보세요. 작은 화면에서는 햄버거 메뉴로, 큰 화면에서는 기본 네비게이션 바를 사용할 수 있어요!</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* 모바일에서는 햄버거 메뉴 🍔 */</span>
<span class="k">@media</span> <span class="p">(</span><span class="n">max-width</span><span class="p">:</span> <span class="m">768px</span><span class="p">)</span> <span class="p">{</span>
  <span class="nc">.nav</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nc">.hamburger-menu</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span> <span class="nb">block</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c">/* 데스크탑에서는 기본 네비게이션 💻 */</span>
<span class="k">@media</span> <span class="p">(</span><span class="n">min-width</span><span class="p">:</span> <span class="m">769px</span><span class="p">)</span> <span class="p">{</span>
  <span class="nc">.nav</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nc">.hamburger-menu</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<hr />

<h2 id="5️⃣그리드-시스템-변화-"><strong>5️⃣ 그리드 시스템 변화</strong> 🔲</h2>

<p>미디어 쿼리를 사용해 그리드 레이아웃을 화면 크기에 맞게 변경할 수 있어요. 예를 들어, 작은 화면에서는 한 열로, 큰 화면에서는 여러 열로 표시할 수 있답니다!</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* 작은 화면에서는 한 열 📱 */</span>
<span class="k">@media</span> <span class="p">(</span><span class="n">max-width</span><span class="p">:</span> <span class="m">600px</span><span class="p">)</span> <span class="p">{</span>
  <span class="nc">.grid</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span> <span class="n">grid</span><span class="p">;</span>
    <span class="py">grid-template-columns</span><span class="p">:</span> <span class="m">1</span><span class="n">fr</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c">/* 큰 화면에서는 여러 열 💻 */</span>
<span class="k">@media</span> <span class="p">(</span><span class="n">min-width</span><span class="p">:</span> <span class="m">601px</span><span class="p">)</span> <span class="p">{</span>
  <span class="nc">.grid</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span> <span class="n">grid</span><span class="p">;</span>
    <span class="py">grid-template-columns</span><span class="p">:</span> <span class="nb">repeat</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="m">1</span><span class="n">fr</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<hr />

<h2 id="6️⃣컨테이너-크기-조정-"><strong>6️⃣ 컨테이너 크기 조정</strong> 📏</h2>

<p>화면 크기에 따라 컨테이너의 최대 너비를 조정해보세요. 이렇게 하면 콘텐츠가 항상 잘 맞도록 조절할 수 있어요!</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* 작은 화면에서는 전체 너비 사용 📱 */</span>
<span class="k">@media</span> <span class="p">(</span><span class="n">max-width</span><span class="p">:</span> <span class="m">768px</span><span class="p">)</span> <span class="p">{</span>
  <span class="nc">.container</span> <span class="p">{</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c">/* 큰 화면에서는 고정된 최대 너비 사용 💻 */</span>
<span class="k">@media</span> <span class="p">(</span><span class="n">min-width</span><span class="p">:</span> <span class="m">769px</span><span class="p">)</span> <span class="p">{</span>
  <span class="nc">.container</span> <span class="p">{</span>
    <span class="nl">max-width</span><span class="p">:</span> <span class="m">1200px</span><span class="p">;</span>
    <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span> <span class="nb">auto</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<hr />

<h2 id="7️⃣애니메이션-적용-"><strong>7️⃣애니메이션 적용</strong> 🎥</h2>

<p>화면 크기에 따라 애니메이션 속도나 동작을 다르게 설정할 수도 있어요! 작은 화면에서는 느리게, 큰 화면에서는 빠르게 설정할 수 있답니다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* 작은 화면에서는 느린 애니메이션 🐢 */</span>
<span class="k">@media</span> <span class="p">(</span><span class="n">max-width</span><span class="p">:</span> <span class="m">600px</span><span class="p">)</span> <span class="p">{</span>
  <span class="nc">.box</span> <span class="p">{</span>
    <span class="nl">animation</span><span class="p">:</span> <span class="n">slide</span> <span class="m">3s</span> <span class="n">ease-in-out</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c">/* 큰 화면에서는 빠른 애니메이션 🐇 */</span>
<span class="k">@media</span> <span class="p">(</span><span class="n">min-width</span><span class="p">:</span> <span class="m">601px</span><span class="p">)</span> <span class="p">{</span>
  <span class="nc">.box</span> <span class="p">{</span>
    <span class="nl">animation</span><span class="p">:</span> <span class="n">slide</span> <span class="m">1s</span> <span class="n">ease-in-out</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<hr />

<h3 id="결론-">결론 ✨</h3>

<p>미디어 쿼리는 배경색을 바꾸는 것 이상의 다양한 기능을 제공해요! 텍스트 크기, 레이아웃 조정, 이미지 교체, 네비게이션 메뉴 변경 등 다양한 방법으로 활용할 수 있답니다. 반응형 웹 디자인을 구현할 때, 미디어 쿼리를 적극 활용해 유연한 레이아웃과 멋진 사용자 경험을 제공해보세요! 😎</p>

<hr />]]></content><author><name>insidepixce</name></author><category term="html-css" /><summary type="html"><![CDATA[오늘은 오즈코딩스쿨 🖐🏻일차! 🎨미디어 쿼리에 관해서 배워보았어요! 열심히 공부한 내용들을 블로그에 정리하는 게 참 재밌는 것 같아요. 그럼 가볼까요?]]></summary></entry><entry><title type="html">딥 다이브 인투 자바스크립트 10장 - 객체 리터럴 요약본</title><link href="/insidepixce-blog/49challenge/2024/08/20/%EA%B0%9D%EC%B2%B4%EC%9A%94%EC%95%BD/" rel="alternate" type="text/html" title="딥 다이브 인투 자바스크립트 10장 - 객체 리터럴 요약본" /><published>2024-08-20T17:00:00-09:00</published><updated>2024-08-20T17:00:00-09:00</updated><id>/insidepixce-blog/49challenge/2024/08/20/%EA%B0%9D%EC%B2%B4%EC%9A%94%EC%95%BD</id><content type="html" xml:base="/insidepixce-blog/49challenge/2024/08/20/%EA%B0%9D%EC%B2%B4%EC%9A%94%EC%95%BD/"><![CDATA[<p>20240821 스터디용 ! 내일은 본과정 시작이니 내일부터도 열심히 달려보자구요!</p>

<h3 id="1-객체란">1. 객체란?</h3>
<p>자바스크립트 = 객체 기반 언어 
객체는 0개 이상의 프로퍼티(속성)으로 구성됨</p>
<ul>
  <li>프로퍼티는 키와 값으로 구성됨, 키는 문자열로 변환
<br /></li>
</ul>

<p>원시값(숫자, 문자열, 불리언) 은 불변하지만 객체는 변경 가능한 값</p>
<ul>
  <li>프로퍼티의 추가, 수정 삭제 가능
typeof 로 찍어보면 object가 나옴</li>
</ul>

<h3 id="2-객체-생성">2. 객체 생성</h3>
<p>객체는 객체 리터럴로 생성함
<code class="language-plaintext highlighter-rouge">{}</code>는 빈 객체를 의미하며, 중괄호 <code class="language-plaintext highlighter-rouge">{}</code> 안에 키-값 쌍을 넣음 <br />
(빈 객체를 typeof로 확인해도 object가 반환됨)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let person = {
  name: 'insidepixce'
};
</code></pre></div></div>

<h3 id="3-프로퍼티">3. 프로퍼티</h3>
<ul>
  <li>프로퍼티 추가 및 내용 갱신 가능
    <blockquote>
      <p>프로퍼티 키는 일반적으로 식별자 네이밍 규칙을 따름
<br /></p>
    </blockquote>
  </li>
</ul>

<blockquote>
  <p>띄어쓰기나 특수 문자가 포함되면 따옴표로 감싸야함</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let person = { name: 'insidepixce' };
person.age = 22; 
</code></pre></div></div>
<h4 id="동적-프로퍼티-키-생성">동적 프로퍼티 키 생성</h4>
<p>대괄효 표기법을 사용해 키를 동적으로 설정할 수 있음</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let mySchool = {};
let dynamicKey = 'bootcamp';
mySchool[dynamicKey] = 'oz';
mySchool['university'] = 'dsu';
mySchool['major'] = 'software';
console.log(mySchool); 
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  bootcamp: 'oz',
  university: 'dsu',
  major:`software`
}
</code></pre></div></div>

<p>이렇게 추가해주면 출력된다</p>

<h3 id="4-프로퍼티-접근">4. 프로퍼티 접근</h3>
<ul>
  <li><strong>마침표 표기법</strong> : 객체.프로퍼티
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>person.name
</code></pre></div>    </div>
  </li>
  <li><strong>대괄호 표기법</strong> : 객체[프로퍼티]
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>person['name']
</code></pre></div>    </div>
    <p>대괄호 안의 키는 반드시 문자열이여야 한다. <br />
키가 유동적으로 결정되거나 특수 문자가 포함된 경우에 사용한다</p>
  </li>
</ul>

<h3 id="5-메서드">5. 메서드</h3>
<p>객체의 프로퍼티 값으로 함수를 사용하는 경우</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let person = {
  name: 'oz',
  greet: function() {
    console.log('Hello, ' + this.name);
  }
};
person.greet(); 
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hello , oz
</code></pre></div></div>

<h3 id="6-프로퍼티-삭제">6. 프로퍼티 삭제</h3>
<p><code class="language-plaintext highlighter-rouge">delete</code>연산자로 객체의 프로퍼티 삭제가능</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let person = { name: 'insidepixce', age: 22 };
delete person.age;
console.log(person); 
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{name : insidepixce}
</code></pre></div></div>

<h3 id="7-여러가지-객체-메서드">7. 여러가지 객체 메서드</h3>
<ul>
  <li>Object.keys(obj): 객체의 키 목록을 배열로 반환</li>
  <li>Object.values(obj): 객체의 값 목록을 배열로 반환</li>
  <li>Object.entries(obj): 객체의 키-값 쌍을 배열의 배열로 반환</li>
  <li>Object.assign(target, …sources): 하나 이상의 소스 객체를 타겟 객체로 복사해 합침</li>
</ul>

<h3 id="8-프로토타입과-상속">8. 프로토타입과 상속</h3>
<ul>
  <li>모든 객체는 다른 객체로부터 상속받을 수 있는 프로토타입을 가지고 있음
    <ul>
      <li>객체는 다른 객체의 속성과 메서드를 상속받아 사용 가능</li>
    </ul>
  </li>
  <li>객체의 프로토타입 체인 끝에는 <code class="language-plaintext highlighter-rouge">null</code>이 있음.</li>
  <li>프로토타입 체인을 따라 속성과 메서드를 탐색함</li>
</ul>]]></content><author><name>insidepixce-record</name></author><category term="49challenge" /><summary type="html"><![CDATA[20240821 스터디용 ! 내일은 본과정 시작이니 내일부터도 열심히 달려보자구요!]]></summary></entry><entry><title type="html">typeof/객체리터럴-49완독챌린지</title><link href="/insidepixce-blog/49challenge/2024/08/20/%EC%98%A4%EB%8A%98%EC%9D%98-%EA%B3%B5%EB%B6%80/" rel="alternate" type="text/html" title="typeof/객체리터럴-49완독챌린지" /><published>2024-08-20T17:00:00-09:00</published><updated>2024-08-20T17:00:00-09:00</updated><id>/insidepixce-blog/49challenge/2024/08/20/%EC%98%A4%EB%8A%98%EC%9D%98-%EA%B3%B5%EB%B6%80</id><content type="html" xml:base="/insidepixce-blog/49challenge/2024/08/20/%EC%98%A4%EB%8A%98%EC%9D%98-%EA%B3%B5%EB%B6%80/"><![CDATA[<p>49완독 챌린지 8일차 , 딥다이브 인투 자바스크립트 10과 스터디 기록</p>

<h3 id="여담">여담</h3>
<p>해피해킹 키보드를 손에 넣었다 ! 새로운 맥북과 새로운 키보드와 함께 화이팅!</p>

<p><img src="https://github.com/user-attachments/assets/5dcc6888-6916-4a1d-9846-9204eac9287c" alt="IMG_7540 2" />
원래 해피해킹 회색 정각 썼는데 무각의 매력에 너무 빠져버려서 나 스스로에게 주는 선물 셈 치고 질러버렸다 ㅠ 덕분에 책상이 좀 더 예뻐진 느낌 !</p>

<h1 id="-스터디-정보">🕖 스터디 정보</h1>
<ul>
  <li>일시: 2024/08/21</li>
  <li>참석인원 : FSO_01_박교담 FSO_01_임성준 FSO_01_박영빈</li>
  <li>교재 진도 : 딥 다이브 인투 자바스크립트 10과</li>
  <li>코테 과제 : 프로그래머스 코딩테스트 입문 1일차 (4문제)</li>
</ul>

<h1 id="1-코딩테스트">💯1. 코딩테스트</h1>
<p>코딩테스트 네 문제 모두 전원 무리없이 풀었음.
네번째 문제에서 조금 어려움이 있었던 사람이 생김</p>

<h2 id="리뷰사항-코딩테스트---네-번쨰-문제">[✅리뷰사항] 코딩테스트 - 네 번쨰 문제</h2>
<p>https://school.programmers.co.kr/learn/courses/30/lessons/120805</p>

<blockquote>
  <p>정수 num1, num2가 매개변수로 주어질 때, num1을 num2로 나눈 몫을 return 하도록 solution 함수를 완성해주세요.</p>
</blockquote>

<p>이떄 나머지를 적절하게 처리하지 못해 알아보다가 math.floor를 사용하여 문제 해결하였다</p>

<h3 id="️-스터디중-추가-공부-사항">⛔️ 스터디중 추가 공부 사항</h3>
<h4 id="mathfloor는-메서드이다">math.floor는 메서드이다.</h4>
<p><strong>메서드란</strong> 객체에 속한 함수이며, 객체의 상태 변경 혹은 특정 동작 수행에 사용됨</p>
<ul>
  <li>프로퍼티에 접근할 수 있음</li>
</ul>

<h4 id="자바스크립트는-모두가-객체이다">자바스크립트는 모두가 객체이다</h4>
<p>자바스크립트의 가장 상위 객체는 <code class="language-plaintext highlighter-rouge">window</code>이며, 모든 객체는 이 객체의 하위 속성으로 존재한다.</p>
<blockquote>
  <p>모든 전역 변수와 함수는 암묵적으로 이 <code class="language-plaintext highlighter-rouge">window</code>객체의 환경 안에서 동작함</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>window.console.log("hello oz");
</code></pre></div></div>

<h1 id="본책">본책</h1>
<p>오늘은 10장 객체 리터럴을 다뤘다. 
정의만 나와있었지만 추가적인 탐구를 통해 좀 더 많은 지식을 갖게 되었던 계기이지 않을까 싶다.</p>

<h2 id="본책내용-객체-리터럴">[본책내용] 객체 리터럴</h2>

<h2 id="박영민-질문사항-typeof-연산자">[🙋🏻박영민 질문사항] typeof 연산자</h2>
<p>본 교재 [10-01] 예제</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var person = {
    name: '49',
    sayhello : function () {
        console.log(`hello! my name is ${this.name}.`)
    }
};

console.log(typeof person);
console.log(person);
</code></pre></div></div>
<p>여기서 왜 typeOf에 object가 나올까? 
<br /> typeof는 자바스크립트의 연산자로, 피연산자의 데이터 타입을 문자열로 반환한다.
<br /> 피연산자의 실제 값이 아니라, 그 값의 타입 종류만 문자열로 반환한다는 것이다.</p>

<p>👩🏻‍🏫 : 문자열로만 받았으면 string이 맞는데 배열로 받았으니까…</p>

<blockquote>
  <p>이 말에 삘받아서 열심히 typeOf와 관련된 문제들을 내봤다.</p>
</blockquote>

<p>내 경험상 boolean 타입 연산이 가장 어려웠기 때문에…그 위주로 내봤음</p>

<h3 id="기본-설정값">기본 설정값</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let a = 0;
let b = 1;
let bool1 = true;
let bool2 = false;
</code></pre></div></div>

<h3 id="1번-문제">1번 문제</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>console.log(typeof(a));
console.log(typeof(b));
console.log(typeof(bool1));
console.log(typeof(bool2));
</code></pre></div></div>
<p>여기까지는 기본적으로 맞춰주셨다.</p>

<h3 id="2번-문제---불리언과-숫자-결합">2번 문제 - 불리언과 숫자 결합</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>console.log(bool1 + num2);
console.log(bool2 + num1);
console.log(typeof(bool1 +b));
console.log(typeof(bool2 +a))
</code></pre></div></div>
<p>불리언과 숫자의 결합을 중심으로 두고 내봤던 문제였는데 반응이 좋았다 (여기서 반응이 좋았다는 말은 사람들이 많이 고민했다는것이다!)</p>
<blockquote>
  <p>💡 자바스크립트에서 불리언 값은 숫자형으로 자동 변환된다!
true는 숫자 1로 변환되고 false는 숫자 0으로 변환되기 때문에, 숫자 연산이 가능해진다.
그래서 숫자가 출력되고,typeof로는 boolean이 출력된다</p>
</blockquote>

<h3 id="3번-문제---논리연산자와-연산자-우선순위를-조금-곁들여서">3번 문제 - 논리연산자와 연산자 우선순위를 조금 곁들여서.</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>console.log(typeof(!!bool1+b))
</code></pre></div></div>
<p>갑자기 얼마전에 배웠던 <code class="language-plaintext highlighter-rouge">이중 부정 연산자</code>가 떠오르고… 거기에 저번에 공부했던 <code class="language-plaintext highlighter-rouge">연산자 우선순위</code>가 떠올라 이러한 문제를 만들어봤다<br />
이것도 반응 진짜 좋아서 아드레날린 올라옴,,,</p>

<p>undefined, string 등 여러가지 대답이 나왔는데 결과는 <code class="language-plaintext highlighter-rouge">number</code>였다. 😃</p>

<p>이중 부정 연산자는 피연산자를 불리언 값으로 변환하는데, <code class="language-plaintext highlighter-rouge">bool1</code>이 <code class="language-plaintext highlighter-rouge">true</code>일 경우 <code class="language-plaintext highlighter-rouge">!!bool1</code>은 여전히 <code class="language-plaintext highlighter-rouge">true</code>이다. <code class="language-plaintext highlighter-rouge">true</code>는 숫자 1로 변환된다.<br /></p>

<p>0은 <code class="language-plaintext highlighter-rouge">false</code>, 나머지 모든 숫자는 <code class="language-plaintext highlighter-rouge">true</code>이다 !<br /><br />
b가 숫자 1이라면 1+1이 계산되고, 결과는 2가 나온다. 거기에 <code class="language-plaintext highlighter-rouge">typeof()</code>를 사용하면 당연히 <code class="language-plaintext highlighter-rouge">number</code>가 나올수밖에.</p>

<p>갈피를 못 찾아 <code class="language-plaintext highlighter-rouge">연산자 우선 순위</code> 참고를 말씀드렸더니 바로 맞추셨다</p>

<h3 id="3번-문제-응용---연산자-우선순위를-바꿔볼까">3번 문제 응용 - 연산자 우선순위를 바꿔볼까?</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>console.log(typeof(!!(bool1+b)));
</code></pre></div></div>
<p>이러면 연산자 우선순위가 아예 바뀌게 되어서 <code class="language-plaintext highlighter-rouge">bool1 + b</code>가 우선으로 실행되고, 2가 된다. <br />
!!2, 즉 이중 부정 연산자로 인해 참인 2는 <code class="language-plaintext highlighter-rouge">true</code>가 되고,</p>

<p>최종적으로는 <code class="language-plaintext highlighter-rouge">typeof(true)</code>인것이기 때문에 boolean이 된다</p>

<h3 id="4번-문제---typeof-연산자가-반환하는-자료형의-자료형은">4번 문제 - typeof 연산자가 반환하는 자료형의 자료형은??</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>console.log(typeof String(typeof(!!(bool1 + b)))); 
</code></pre></div></div>
<p>이게 가능합니다! <br />
사실 이 문제를 먼저 낼까 다음 문제를 먼저 낼까 고민을 많이 했는데 다음 문제에서 낚아보려면 이 문제를 먼저 풀어보는게 뇌리에 오래 박힐 것 같았다.</p>

<p><code class="language-plaintext highlighter-rouge">typeof(!!(bool1 + b))</code>이게 <code class="language-plaintext highlighter-rouge">boolean</code>이 나온다는거는 아까 열심히 고민하여 알게 되었다.
그렇다면 <code class="language-plaintext highlighter-rouge">typeof(String(boolean))</code> 이라는 뜻인데. 
<code class="language-plaintext highlighter-rouge">String()</code>은 괄호 안에 있는 것들을 문자열로 만들어주는 역할을 한다.
그러니 이 코드의 결과는 string이 나오는 것이다.</p>

<h3 id="4번-문제-응용---엥-그러면-이거는-안되는거-아니야">4번 문제 응용 - 엥 그러면 이거는 안되는거 아니야?</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>console.log(typeof(typeof(!!(boo1+b))));
</code></pre></div></div>
<p>뭘로 감싸주지도 않았는데?</p>
<blockquote>
  <p>typeof는 피연산자의 데이터 타입을 문자열로 반환한다</p>
</blockquote>

<p>포스팅 초반에 힌트가 있었다. 굳이 string으로 바꾸지 않아도 원래 출력값은 string인걸.</p>

<h1 id="그리고-오늘의-문제">그리고 오늘의 문제</h1>

<h2 id="상품-관리-시스템">상품 관리 시스템</h2>
<p>1990년, 동네 구멍가게 신세를 탈출한 ‘이마트’. 이제는 계산대로 계산을 하고 싶습니다. 각 상품에는 이름, 가격, 재고 수량,재입고 여부라는 정보가 있는데요, 자동화 시스템을 도입해 재고가 모두 소진된 상품은 자동으로 목록에서 삭제되게 하려고 해요.</p>

<p>함수 설명</p>
<ul>
  <li>addProduct: 상품을 추가하는 함수입니다.</li>
  <li>updateProductName: 상품의 이름을 변경하는 함수입니다.</li>
  <li>handleOutOfStock: 재고가 0이 되면 재고 수량을 null로 설정하는 함수입니다.</li>
  <li>printAllProducts: 현재 상점에 있는 모든 상품을 출력하는 함수입니다.</li>
  <li>removeIfOutOfStock: 재고가 0이고 재입고가 불가능한 상품을 목록에서 삭제하는 함수입니다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> // 1. 새로운 상품을 객체로 동적으로 추가하는 함수
function addProduct(store, name, price, quantity, restock) {
  
}

// 2. 상품 이름 수정 함수
function updateProductName(store, oldName, newName) {
 
}

// 3. 재고가 0이면 수량을 null로 설정하는 함수
function handleOutOfStock(store, productName) {

}

// 4. 모든 상품의 최종 목록을 출력하는 함수
function printAllProducts(store) {
  
}

// 5. 재고가 0이고 재입고가 불가능한 상품을 목록에서 삭제하는 함수
function removeIfOutOfStock(store) {
  
}

// 테스트 코드
function runTests() {
  let store = {}; // 상점 초기화
  
  console.log("==== 상품 추가 테스트 ====");
  // 1. 상품 추가 테스트
  addProduct(store, 'Apple', 1.0, 10, true);
  addProduct(store, 'Banana', 0.5, 5, false);
  addProduct(store, 'Orange', 0.8, 2, false);
  printAllProducts(store);
  
  console.log("\n==== 상품 이름 수정 테스트 ====");
  updateProductName(store, 'Orange', 'Grapefruit');
  printAllProducts(store);
  
  console.log("\n==== 재고 소진 처리 테스트 ====");
  // 3. 재고 소진 처리 테스트
  handleOutOfStock(store, 'Banana');
  printAllProducts(store);
  
  console.log("\n==== 재고 소진 및 삭제 테스트 ====");
  // 4. 재고가 0이고 재입고가 불가능한 상품 삭제 테스트
  removeIfOutOfStock(store);
  printAllProducts(store);
}

// 테스트 실행
runTests();
</code></pre></div></div>

<h2 id="주민등록시스템이-날아갔어요">주민등록시스템이 날아갔어요!</h2>
<p>마을에서는 모든 주민의 정보를 개체로 관리하고 있습니다. 각 주민의 이름, 나이, 직업, 그리고 거주지가 적혀있죠. 하지만 시간이 지나면 나이를 먹고(ㅠ) , 회사가 뭣같으면 떄려치고 새로 구직할수도 있겠죠. 그리고, 이사를 가는 주민들도 있어요. 변경사항을 어떻게 해야할까요?</p>

<p>함수 설명</p>
<ul>
  <li>createPerson: 주민의 이름, 나이, 직업, 거주지 정보를 저장하고, 주민 객체를 반환하는 함수입니다.</li>
  <li>updateJob: 특정 주민의 직업을 변경하는 함수입니다.</li>
  <li>updateResidence: 특정 주민의 거주지를 변경하는 함수입니다.</li>
  <li>deletePerson: 주민 목록에서 해당 이름의 주민을 삭제하는 함수입니다.</li>
  <li>
    <p>printAllResidents: 현재 등록된 모든 주민의 정보를 출력하는 함수입니다.</p>
  </li>
  <li>각 함수는 명확한 인자와 동작을 가져야 하며, 하나의 역할이 있어야 합니다</li>
  <li>함수의 재사용성과 모듈화에 초점을 맞춰보세요</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// 1. 주민 생성 함수
function createPerson(name, age, job, residence) {
  // 여기다가 코딩
}

// 2. 주민 직업 변경 함수
function updateJob(person, newJob) {
  //여기다가 코딩
}

// 3. 주민 거주지 변경 함수
function updateResidence(person, newResidence) {
  // 여기다가 코딩
}

// 4. 주민 삭제 함수
function deletePerson(residents, name) {
  // 여기다가 코딩
}

// 5. 모든 주민 정보 출력 함수
function printAllResidents(residents) {
  // 여기다가 코딩
}

 let residents = [];
  
  console.log("==== 주민 생성 테스트 ====");
  // 주민 생성 테스트
  residents.push(createPerson('Lee', 30, 'Teacher', 'Seoul'));
  residents.push(createPerson('Kim', 25, 'Engineer', 'Busan'));
  residents.push(createPerson('Park', 40, 'Doctor', 'Daegu'));
  
  // 생성 후 출력
  printAllResidents(residents);
  
  console.log("\n==== 직업 및 거주지 변경 테스트 ====");
  // 직업 및 거주지 변경 테스트
  updateJob(residents[0], 'Principal');
  updateJob(residents[1], 'Developer');
  updateResidence(residents[0], 'Incheon');
  updateResidence(residents[2], 'Busan');
  
  // 변경 후 출력
  printAllResidents(residents);
  
  console.log("\n==== 주민 삭제 테스트 ====");
  // 주민 삭제 테스트
  deletePerson(residents, 'Park');
  
  // 삭제 후 출력
  printAllResidents(residents);
  
  console.log("\n==== 추가 삭제 테스트 ====");
  // 없는 주민 삭제 시도
  deletePerson(residents, 'Unknown');
  
  // 삭제 후 출력
  printAllResidents(residents);
</code></pre></div></div>]]></content><author><name>insidepixce</name></author><category term="49challenge" /><summary type="html"><![CDATA[49완독 챌린지 8일차 , 딥다이브 인투 자바스크립트 10과 스터디 기록]]></summary></entry><entry><title type="html">오즈코딩 start- 네이버 화면 커스텀하기</title><link href="/insidepixce-blog/oz-coding/2024/08/11/%EC%98%A4%EC%A6%881st/" rel="alternate" type="text/html" title="오즈코딩 start- 네이버 화면 커스텀하기" /><published>2024-08-11T17:00:00-09:00</published><updated>2024-08-11T17:00:00-09:00</updated><id>/insidepixce-blog/oz-coding/2024/08/11/%EC%98%A4%EC%A6%881st</id><content type="html" xml:base="/insidepixce-blog/oz-coding/2024/08/11/%EC%98%A4%EC%A6%881st/"><![CDATA[<p>어머머머…굿즈 왔다 ! 잘쓸게요</p>

<p><img src="https://github.com/user-attachments/assets/4d29e84a-06ac-4cda-b979-5d9a6e2d313d" width="50%" height="10%" />
<img src="https://github.com/user-attachments/assets/6a0bc4a4-e720-42eb-8080-1b199216907a" width="40%" height="10%" /></p>

<p>오즈코딩 굿즈가 집에 도착했다 !!!!</p>

<h1 id="1강-오늘의-목표와-커스텀-준비하기">1강. 오늘의 목표와 커스텀 준비하기</h1>

<blockquote>
  <p>네이버를 내가 원하는 모습으로 바꿔주자</p>

</blockquote>

<h2 id="내가-사용하는-기능">내가 사용하는 기능</h2>

<p>강의에서는 뉴스탭, 광고등을 다 없애고 로그인과 아이콘들만 남겨두겠다고 했지만, 나는 네이버에서 뉴스를 자주 보기 때문에 나에 맞게 네이버를 좀 바꿔보고싶다는 생각이 들었다.</p>

<p>또 커스텀에 환장한 개발자로서 색을 안 바꿀수 없지 ! 나는 보통 다크모드를 사용하고, 검정과 초록의 조화 즉 사이버펑크한 느낌을 상당히 좋아한다. 그러한 색으로 커스텀을 해보기로 결심했다. 라고 했지만 프사에 맞게 커스텀되었다 ;;</p>

<h2 id="준비하기">준비하기</h2>

<h3 id="1-페이지-소스-보기">1. 페이지 소스 보기</h3>

<p>페이지 소스 보기를 클릭하면 웹 페이지의 광고 및 콘텐츠 블록과 관련된 HTML 및 JS 코드가 나온다.</p>

<p>반응형 디자인에 테마 적용, 이벤트 트래킹까지 알차게 들어있다. (사실 뒤에 코드는 다 안읽었다. 중간에 보다가 내림)</p>

<p><img src="https://github.com/user-attachments/assets/67cf072c-7166-4033-bf61-7c810b4de7ea" alt="image" /></p>

<p>우리가 사용하는 어떤 사이트든 모든 사이트들이 다 소스코드를 공개하고 있다.</p>

<p>모든 코드를 공개하는건 아니고 프론트앤드 코드는 거의 다 공개하고 있다고 보면 됨…</p>

<h3 id="2개발자-도구">2.개발자 도구</h3>

<p>우클릭하고 검사를 누르면 개발자가 도구가 실행된다</p>

<p><img src="https://github.com/user-attachments/assets/8879ff08-8bde-4ac5-925f-8e3119a499bf" alt="image" /></p>

<p>소스 보기를 해서 나온 코드를 좀 더 정렬해서 볼 수 있다</p>

<blockquote>
  <p>웹사이트는 head와 body가 나눠져 있다</p>

</blockquote>

<h1 id="2강-실습해보자-">2강. 실습해보자 !</h1>

<h2 id="1-도구를-더-알아보자">1. 도구를 더 알아보자</h2>

<h3 id="1-선택자-도구">1. 선택자 도구</h3>

<p><img src="https://github.com/user-attachments/assets/62a24972-f26a-4079-9d0d-5a59fa808ae6" alt="image" /></p>

<p>선택자 도구를 사용해서 코드를 선택하는 방법을 설명해주었다.</p>

<p>어떻게 매칭하는지를 알 수 있었다.</p>

<h2 id="2-임시로-바꿔보자">2. 임시로 바꿔보자</h2>

<p><img src="https://github.com/user-attachments/assets/c2aba516-499f-414b-9f92-03bf5285dcf0" width="600%" /></p>
<div style="text-align: center;">
    <img src="https://github.com/user-attachments/assets/db3fd2bf-0e4f-4e5f-af3f-bf70610c1c4e" width="10%" />
</div>

<p>코드에 나와있는 웹툰 부분을 야구로 바꿔보았더니 야구로 보여진다.</p>

<p>css도 바꿔서 색상만 바꿀 수 있기도 하다.</p>

<blockquote>
  <p>새로고침하면 변경한 코드가 모두 변경된다</p>

</blockquote>

<h1 id="3강-영구적으로-적용시키는-방법">3강. 영구적으로 적용시키는 방법</h1>

<p><img src="https://github.com/user-attachments/assets/cdaefda7-37c8-4bd5-ad62-5f20d0341338" alt="image" /></p>

<p>custom style scirpt를 사용하여 저장해줬다
다른 강의에서도 초반에 네이버를 바꾸는 실습을 잠깐 하고 넘어간적이 있는데 직접 영구적으로 설정할 수 있는 방법을 제시하고 직접 해보게 하는 강의방식이 마음에 들었다.</p>

<h1 id="완성본">완성본</h1>
<p><img src="https://github.com/user-attachments/assets/3f31a078-8fc8-4d3d-ae09-7ad8930fe259" alt="image" /></p>

<ul>
  <li>필요없는 부분을 모두 지워주었다(뉴스 제와)</li>
  <li>로고를 지워주었다 (이때 자바스크립트 사용)</li>
  <li>로그인 창 밑에 내 프로필 사진을 넣고 싶었는데, css수정만으로 추가적인 구조물을 넣는것은 불가능하여 원래 있던 기상 정보 탭의 기능을 다 없애고 그냥 내 로고를 들어가게 하였다</li>
  <li>자바스크립트를 활용하여 블로그로(insidepixce.site) 로 이동하는 버튼을 구현했다.</li>
  <li>뉴스 탭에서 엔터부분과 쇼핑투데이가 있었는데 엔터테이먼트에는 관심이 없고 쇼핑투데이는 광고러 거슬려서 빼주었다. 이때 이부분만 빼는것이 어려워 자바스크립트를 사용했다. 
<code class="language-plaintext highlighter-rouge">iframe</code>속성을 켜주어야 한ㄷ,.</li>
  <li>배경화면 색이 안 변해서 한참을 헤매었는데 네이버 측에서 배경화면을 이미지로 설정해뒀더라…</li>
  <li>이미지를 안보이게 설정하고 background color을 설정해주었다</li>
</ul>

<h1 id="html-코드-설명">HTML 코드 설명</h1>

<h3 id="1-전체-배경과-스타일-초기화">1. 전체 배경과 스타일 초기화</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>body {
    background-color: #decbb1 !important; 
    background-image: none !important; 
}
</code></pre></div></div>
<h3 id="2-배너-영역-숨기기">2. 배너 영역 숨기기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.Layout-module__banner_area___CUXNe {
    display: none;
}
</code></pre></div></div>
<h3 id="3-쇼핑-섹션-숨기기">3. 쇼핑 섹션 숨기기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#shopping {
    display: none !important;
}
</code></pre></div></div>
<h3 id="4-특정-콘텐츠-헤더-항목-숨기기">4. 특정 콘텐츠 헤더 항목 숨기기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#feed &gt; div.ContentHeaderView-module__content_header___nSgPg &gt; div &gt; ul &gt; li:nth-child(4) {
    display: none !important;
}
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">li:nth-child(4)</code>: 특정 리스트 항목(네 번째)을 숨김. 이렇게 <code class="language-plaintext highlighter-rouge">&gt;</code>을 활용하여 타고타고 선택할수도 있음.</p>

<h3 id="5-피드-숨기기">5. 피드 숨기기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#feed {
    display: none !important;
}
</code></pre></div></div>
<h3 id="6-우측-툴-영역-숨기기">6. 우측 툴 영역 숨기기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.RightWidget-module__tool_area___dhpNQ {
    display: none !important;
}
</code></pre></div></div>
<h3 id="7-바로가기-리스트-숨기기">7. 바로가기 리스트 숨기기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.shortcut_list {
    display: none !important;
}
</code></pre></div></div>

<h3 id="8-푸터-숨기기">8. 푸터 숨기기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.footer_inner {
    display: none !important;
}
</code></pre></div></div>
<p>푸터까지는 안 건드리려고 했는데 거슬리는걸 어떡해.</p>

<h3 id="9-하단-배너-숨기기">9. 하단 배너 숨기기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.BottomBanner-module__banner_box___aWPRf {
    display: none !important;
}
</code></pre></div></div>
<h3 id="10-검색-로고-숨기기">10. 검색 로고 숨기기</h3>
<p>이게 조금 어려웠던게 네이버에서 로고를 두개를 사용하고 있었다. 인터랙티브 로고랑 그냥 일반 svg로고를 사용했는데 움직이는 로고가 special input logo였던걸로 기억함</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#special-input-logo {
    display: none !important;
}
</code></pre></div></div>

<h3 id="11-검색-그룹-스타일-수정">11. 검색 그룹 스타일 수정</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.search_group_inner {
    border: 0px solid #D2B48C !important; 
    width: 80% !important; 
    margin: 0 auto; 
    padding: 10px; 
    box-sizing: border-box; 
}
</code></pre></div></div>
<p>테두리 만들려다가 없애버림. 
넓이를 더 넓히고 중앙에 위치시키고 
자동 중앙 정렬시킴
내부여백 10px정도 줬고 패딩과 테두리가 헷갈리니까 border-box로 때워버림</p>

<h3 id="12-헤더-검색-영역-스타일-수정">12. 헤더 검색 영역 스타일 수정</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#header .header_inner .search_area {
    border: 0px solid #D2B48C !important; 
    width: 80% !important; 
    margin: 0 auto; 
    box-sizing: border-box; 
}
</code></pre></div></div>

<p>이것도 보더 만들려다 없애버림
안예뻤다</p>

<h3 id="13-헤드라인-링크-숨기기">13. 헤드라인 링크 숨기기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.link_headline {
    display: none !important;
}
</code></pre></div></div>

<h3 id="14-검색-버튼-색-바꾸기">14. 검색 버튼 색 바꾸기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#search-btn {
    fill: #D2B48C !important;
}
</code></pre></div></div>
<ul>
  <li>svg 색 바꿀때는 fill속성을 사용한다</li>
</ul>

<h3 id="15-로그인-버튼-색-수정">15. 로그인 버튼 색 수정</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#sform {
    border: 0px solid #D2B48C !important; 
    border-radius: 5px; 
    box-sizing: border-box; 
    display: flex; 
    align-items: center;
}
</code></pre></div></div>

<h3 id="16-데일리-보드-영역-숨기기">16. 데일리 보드 영역 숨기기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.DailyBoardView-module__daily_board_area___Q6Jmf {
    display: none !important;
}
</code></pre></div></div>

<h3 id="18-이슈-배너-스타일-수정">18. 이슈 배너 스타일 수정</h3>
<p>사진이 들어갈수 있게 이슈 배너 높이를 늘려주었다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.IssueBanner-module__issue_banner_area___pl_8r {
    height: 300px; 
}
</code></pre></div></div>
<h4 id="배경화면-설정">배경화면 설정</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.IssueBanner-module__issue_banner_area___pl_8r .IssueBanner-module__banner_rolling___Qy0KZ {
    background-image: url('https://insidepixce.site/logo.png') !important;
    background-size: cover; 
    background-position: center; 
    background-repeat: no-repeat;
    width: 100%; 
    height: 300px; 
    display: flex;
    justify-content: center;
    align-items: center;
    box-sizing: border-box; 
}
</code></pre></div></div>
<h3 id="19-이슈-배너-링크-숨기기">19. 이슈 배너 링크 숨기기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.IssueBanner-module__link_banner_issue___bNYKC {
    text-indent: -9999px; 
    overflow: hidden;
    display: block;
}
</code></pre></div></div>

<h3 id="20-가상-키보드-버튼-숨기기">20. 가상 키보드 버튼 숨기기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#ke_kbd_btn, #_nx_kbd {
    display: none !important;
}
</code></pre></div></div>

<h1 id="js-코드-설명">js 코드 설명</h1>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>document.querySelectorAll('.ContentHeaderView-module__tab_item___dz3nK').forEach(function(item) {
    if (item.textContent.includes('엔터') || item.textContent.includes('쇼핑투데이')) {
        item.style.display = 'none';
    }
});
</code></pre></div></div>
<p>엔터와 쇼핑투데이를 없애줌
요즘 잘 쓰지 않는 문법을 쓰면서 좀 더 코드를 간결하게 쓰는 연습을 하고 있는데 이 코드 문법 좀 쌈@뽕하게 쓴 것 같다</p>

<h2><br /></h2>

<p>열심히 해본 것 같아서 뿌듯하긴 하다. 새로운 도전인 만큼 더욱 더 열심히 준비해야할 것이 많을텐데, 앞으로의 마음가짐을 좀 더 다잡고 시작해봐야겠다.</p>]]></content><author><name>insidepixce</name></author><category term="oz-coding" /><category term="til" /><summary type="html"><![CDATA[어머머머…굿즈 왔다 ! 잘쓸게요]]></summary></entry><entry><title type="html">[뻘글]도대체 어디까지 발전할건데?</title><link href="/insidepixce-blog/talk/2024/08/10/%EB%8F%84%EC%96%B4%EC%84%B1st-copy/" rel="alternate" type="text/html" title="[뻘글]도대체 어디까지 발전할건데?" /><published>2024-08-10T17:00:00-09:00</published><updated>2024-08-10T17:00:00-09:00</updated><id>/insidepixce-blog/talk/2024/08/10/%EB%8F%84%EC%96%B4%EC%84%B1st%20copy</id><content type="html" xml:base="/insidepixce-blog/talk/2024/08/10/%EB%8F%84%EC%96%B4%EC%84%B1st-copy/"><![CDATA[<p>요즘 나는 ‘유한함’에 대한 생각을 많이 한다. 상당히 난해한 주제인데, 유한함은 우리 삶에 가장 가까이 다가와있는 속성 중 하나이다. 그 방식은 다양하겠다만 사람은 누구나 태어났고, 죽는다. 인간의 유한함은 바로 이 사실에서 시작된다.</p>

<p>인간은 본능적으로 본인이 처한 상황이 더 편리하게 개선되기를 바란다. 이 본능은 모든 생명체는 유한하기 때문이라는 점에서 시작한다고 생각한다. 죽음에 대한 두려움, 즉 유한한 삶의 끝에 대한 두려움으로 인해 인간은 무한함을 목표로 달려나가고 있으며, 수백년간 몇 차례의 산업 혁명에 걸쳐 끊임없이 발전했다. 1차 산업혁명은 먼 길을 걸어다니는 수고를 덜었고 , 2차 산업혁명은 복잡한 노동을 줄였다. 3차 산업혁명은 정보화 세대를 열었다. 방 안에서 인터넷이라는 또 다른 세계에 접속하여 원하는 거의 모든 정보를 얻을 수 있게 했고, 직접 경험하며 깨우쳐야 할 것들을 손가락 몇 번 움직임으로 얻을 수 있게 되었다.</p>

<p>하지만 조금 시선을 돌려 생각해보자. 1,2차 산업혁명 때는 복잡한 노동을 기계에게 미뤘고, 3차 산업혁명 때는 힘든 계산을 컴퓨터에게 미뤘다. 시간이 지나 현재는 4차 산업혁명이 시작되고 있으며, 이번 산업혁명은 사고하는 것조차 인공지능에게 미루려고 한다. 이미 노동력과 정보 탐색 능력이 기계보다 뒤떨어지는 지금 인간이 내세울만한 유일한 능력인 ‘무에서 유를 창조해낼수 있는 능력’, 즉 상상할 수 있는 능력은 4차 산업혁명이 지속될수록 퇴화할 것이다.</p>

<p>4차 산업 혁명, 도대체 어떤 직업을 가져야 하는가?</p>

<p>뭐 이런 문구의 강의들, 안 본 사람은 없을것이다. 뉴스에서도, 예능에서도, 심지어 학교에서도 4차 산업혁명이 다가온다며 어떤 직업이 살아남을지, 어떤 직업이 대체될지 떠들곤 하니 말이다. 그럴때마다 나는 이러한 생각을 한다.</p>

<p>어차피 다 대체될 거야. 너도, 나도, 그리고 이 말 하시는 강사님도.</p>

<p>나는 줄곧 도대체 얼마나 발전해야 하는가라는 고민을 하곤 했다. 인간이 느낄 수 없는 ms단위의 속도를 개선시키겠다며 새로운 프로그래밍 언어들이 끊임없이 출시되고 있다. 현재의 웹으로도 사람들은 큰 불편함을 느끼지 않으나 개발자들은 항상 ‘최적화’라는 단어를 입에 달고 산다. 뭐, 이러다가 사용자의 생각을 읽어내어 다음 어떤 웹에 접속할건지 예측한 다음 미리 띄워주는 서비스라도 개발하려나 싶었다.</p>

<p>나는 인간이 무한해지기 전까지는 기술이 끊임없이 발전할 것이라 결론지었다.</p>

<p>아마 인간은 아무것도 하지 않아도 될때까지 가지 않을까 싶다. 손 하나 까딱하지 않아도 될 때까지. 물을 마시거나 밥을 먹거나 어딘가에 가거나 즐거움을 느끼거나 슬픔을 느끼거나 흥미로움을 느끼거나 이 모든 일들을 수행하는 데 조금의 노력도 필요없도록.</p>

<p>그내가 이 글을 쓴다고 해서 달라질 건 없다. 내가 발전을 멈추라고 해도 인류는 발전한다. 그리고 발전을 멈추라고 할 생각도 없다. 발전이 나쁘다는 것도 아니다. 나는 그저 쏟아지는 기술에 몸을 맡긴 후 편리함의 극한에 도달할 것이다.</p>

<p>그냥 인간이 어디까지 발전할지 궁금하다. 정확히 말하면 이제는 인간이 발전하는 것이 아닌 기술이 얼마나 발전할지 궁금하다. 그냥 그렇다고 뭐.</p>]]></content><author><name>insidepixce</name></author><category term="talk" /><category term="잡소리" /><summary type="html"><![CDATA[요즘 나는 ‘유한함’에 대한 생각을 많이 한다. 상당히 난해한 주제인데, 유한함은 우리 삶에 가장 가까이 다가와있는 속성 중 하나이다. 그 방식은 다양하겠다만 사람은 누구나 태어났고, 죽는다. 인간의 유한함은 바로 이 사실에서 시작된다.]]></summary></entry><entry><title type="html">DOM이란 무엇인가</title><link href="/insidepixce-blog/javascript/2024/07/20/dom/" rel="alternate" type="text/html" title="DOM이란 무엇인가" /><published>2024-07-20T17:00:00-09:00</published><updated>2024-07-20T17:00:00-09:00</updated><id>/insidepixce-blog/javascript/2024/07/20/dom</id><content type="html" xml:base="/insidepixce-blog/javascript/2024/07/20/dom/"><![CDATA[<p>DOM(Document Object Model)은 자바스크립트와 같은 프로그래밍 언어가 웹 페이지의 구조, 스타일, 콘텐츠를 동적으로 조작할 수 있도록 하는 인터페이스이다. 
<br />웹 페이지가 브라우저에 로드될 때, HTML 문서는 트리 구조로 표현되며, 이 구조를 통해 자바스크립트는 웹 페이지의 각 요소에 접근하고 조작할 수 있다.</p>

<p><img src="https://image.slidesharecdn.com/dom-130225112417-phpapp02/95/an-introduction-to-the-dom-3-638.jpg?cb=1367487766" alt="image" />
html도 하나의 노드이다! 
그니까 head,body,title,script,h1 등 모든 태그가 다 노드이다 
이중 html 태그를 요소노드라고 부르고 요소노드안에 있는 글자를 text노드 라고 부른다</p>

<blockquote>
  <p>나는 이런 생각을 했어!</p>
</blockquote>

<p>돔이 약간 고척돔처럼 천장이 덮인 그런 공간감있는 단어기도 하고 뭐 생태계를 구현한 돔구조이다 뭐 이런 생각이 들어서 돔=생태계라는 비유로 이해해보았지롱
생태계는 하나하나 구성이 있으니까 ! 구성들도 생태계이고, 그 구성들이 모여도 생태계인것처럼</p>
<h1 id="dom의-기본-개념">DOM의 기본 개념</h1>

<h2 id="트리-구조">트리 구조:</h2>
<ul>
  <li>DOM은 트리 구조로 표현됨</li>
  <li>HTML 문서의 각 요소는 노드(node)로 표현된다
트리의 최상위 노드는 document 객체이며 이 아래에 HTML 태그들이 계층적으로 연결되어 있음</li>
</ul>

<blockquote>
  <html> 요소 아래에 <body>와 <head> 요소가 있고, 그 아래에 자식 요소들 
</head></body></html>
</blockquote>

<h2 id="노드node">노드(Node):</h2>

<p>DOM에서 여러 종류의 노드는 문서의 요소를 나타냄</p>
<h4 id="element-노드">Element 노드</h4>
<ul>
  <li>HTML 태그 요소를 나타냄 (예: &lt;div&gt;, &lt;p&gt;).
    <h4 id="text-노드">Text 노드</h4>
  </li>
  <li>요소 내의 텍스트를 나타냄
    <h4 id="attribute-노드">Attribute 노드</h4>
  </li>
  <li>요소의 속성을 나타냅니다 (예: id, class).
    <h4 id="comment-노드">Comment 노드:</h4>
  </li>
  <li>HTML 주석을 나타냅니다.</li>
</ul>

<h2 id="요소element-선택">요소(Element) 선택:</h2>

<p>자바스크립트가 다양한 방법으로 dom 요소를 선택</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">getElementById()</code>: 특정 ID를 가진 요소를 선택.</li>
  <li><code class="language-plaintext highlighter-rouge">getElementsByClassName()</code>: 특정 클래스 이름을 가진 요소를 모두 선택.</li>
  <li><code class="language-plaintext highlighter-rouge">getElementsByTagName()</code>: 특정 태그 이름을 가진 요소를 모두 선택.</li>
  <li><code class="language-plaintext highlighter-rouge">querySelector()</code>: CSS 선택자를 사용하여 첫 번째 일치하는 요소를 선택.</li>
  <li><code class="language-plaintext highlighter-rouge">querySelectorAll()</code>: CSS 선택자를 사용하여 일치하는 모든 요소를 선택.</li>
</ul>

<h2 id="dom-조작">DOM 조작:</h2>

<p>선택된 요소를 통해 DOM을 조작</p>

<ul>
  <li>속성 변경: <code class="language-plaintext highlighter-rouge">element.setAttribute()</code>, ``element.id<code class="language-plaintext highlighter-rouge">, </code>element.className`</li>
  <li>내용 변경: <code class="language-plaintext highlighter-rouge">element.textContent</code>, <code class="language-plaintext highlighter-rouge">element.innerHTML</code></li>
  <li>스타일 변경: <code class="language-plaintext highlighter-rouge">element.style</code></li>
  <li>이벤트 핸들링: <code class="language-plaintext highlighter-rouge">element.addEventListener()</code></li>
  <li>요소 추가 및 제거: <code class="language-plaintext highlighter-rouge">document.createElement()</code>로 새로운 요소를 생성, <code class="language-plaintext highlighter-rouge">appendChild()</code> 또는 <code class="language-plaintext highlighter-rouge">removeChild()</code>로 요소를 추가하거나 제거</li>
</ul>

<h2 id="dom-이벤트">DOM 이벤트:</h2>
<ul>
  <li>DOM은 사용자의 상호작용(클릭, 입력 등)에 반응하여 동작하는 이벤트를 처리함 (<code class="language-plaintext highlighter-rouge">eventhandler</code>)
이벤트 핸들러를 사용하여 특정 이벤트가 발생할 때(클릭, 스크롤 등) 실행할 코드를 정의할 수 있음
예를 들어, 버튼 클릭 시 특정 함수를 실행하거나, 입력 필드에 텍스트가 입력될 때 실시간으로 처리하는 것이 가능</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;DOM 조작 예제&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1 id="title"&gt;Hello, World!&lt;/h1&gt;
  &lt;button id="changeTextBtn"&gt;텍스트 변경&lt;/button&gt;

  &lt;script&gt;
    // 요소 선택
    const titleElement = document.getElementById('title');
    const buttonElement = document.getElementById('changeTextBtn');

    // 버튼 클릭 시 텍스트 변경
    buttonElement.addEventListener('click', () =&gt; {
      titleElement.textContent = 'DOM 조작 완료!';
    });
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre></div></div>

<blockquote>
  <p>이 예제에서는 Hello, World!라는 제목을 가진 &lt;h1&gt; 요소를 선택한 후, 버튼을 클릭하면 해당 제목의 텍스트가 DOM 조작 완료!로 변경됨</p>
</blockquote>

<h3 id="요약">요약</h3>

<p>DOM은 웹 페이지의 구조를 표현하는 객체 모델로, 자바스크립트를 사용하여 웹 페이지의 내용을 동적으로 조작할 수 있게 함.</p>]]></content><author><name>insidepixce</name></author><category term="javascript" /><category term="til,javascript" /><summary type="html"><![CDATA[DOM(Document Object Model)은 자바스크립트와 같은 프로그래밍 언어가 웹 페이지의 구조, 스타일, 콘텐츠를 동적으로 조작할 수 있도록 하는 인터페이스이다. 웹 페이지가 브라우저에 로드될 때, HTML 문서는 트리 구조로 표현되며, 이 구조를 통해 자바스크립트는 웹 페이지의 각 요소에 접근하고 조작할 수 있다.]]></summary></entry><entry><title type="html">서버 로그 저장형 stopwatch 구현 (js편)</title><link href="/insidepixce-blog/test/2024/07/19/sd/" rel="alternate" type="text/html" title="서버 로그 저장형 stopwatch 구현 (js편)" /><published>2024-07-19T17:00:00-09:00</published><updated>2024-07-19T17:00:00-09:00</updated><id>/insidepixce-blog/test/2024/07/19/sd</id><content type="html" xml:base="/insidepixce-blog/test/2024/07/19/sd/"><![CDATA[<p>이번에 구현하게 된 기능들 중에 조금 까다로웠던 부분이 있어서 이번 프로젝트에 대해서는 한번 포스팅해 보고 싶었다.
내가 구현해야 할 기능은 스탑워치를 실행하고, 멈추고, 저장 버튼을 누르면 서버에 업로드되어, 새로고침 후에도 저장한 시간부터 다시 공부시간을 측정하는 것이였다.</p>

<p>이 포스팅은 stopwatch.js부분의 스톱워치 기능을 구현한 방법에 대해서 알아볼것이다.</p>

<h1 id="타이머-정확성-유지">타이머 정확성 유지</h1>

<p>이 작업을 하면서 유난히 어려웠던 부분이 몇가지 있었다. 첫번쨰로는 타이머의 정확성을 유지하는 부분이였다. <code class="language-plaintext highlighter-rouge">setInterval</code> 함수는 명시된 시간 간격으로 함수를 호출하지만 실제 호출 간격은 브라우저의 이벤트 루프와 시스템 리소스에 따라 변동될 수 있었다. 따라서 타이머가 정확히 1초마다 1씩 증가하도록 딱 고정하기가 어려웠는데, 이 문제를 해결하기 위해서 고정된 시간 간격(?)을 유지하도록 계산을 하는 방법을 사용했다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let lastTime = Date.now();
timer = setInterval(() =&gt; {
    const now = Date.now();
    time += (now - lastTime) / 1000;  // 정확한 시간 간격을 계산하여 시간 증가
    lastTime = now;
    document.getElementById('timer').textContent = new Date(time * 1000).toISOString().substr(11, 8);
}, 1000);
</code></pre></div></div>

<h1 id="상태-관리">상태 관리</h1>
<p>타이머의 상태를 관리하는 것도 어려운 부분 중 하나였다. 상태를 나타내기 위해서 <code class="language-plaintext highlighter-rouge">running</code>변수를 사용하였다. 실행중인지 여부를 나타낸다는 말이다. 상태 관리를 명확하게 하기 위해 변수 초기화 상태 전환을 잘 잘 잘 처리해야 했다 ;;</p>

<h1 id="데이터-동기화">데이터 동기화</h1>
<p>저장된 데이터를 서버로부터 불러와 클라이언트에 동기화하는 것도 약간 까다로웠던게, 밀리초 단위로 계산되는지라 이를 변환하는 작업도 참 힘들었던것 같다.</p>

<h2 id="변수-선언">변수 선언</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let timer;
let running = false;
let time = 0;
</code></pre></div></div>
<p>필요한 변수를 선언해준다. 
<code class="language-plaintext highlighter-rouge">let timer;</code> 변수를 선언하여 <code class="language-plaintext highlighter-rouge">setInterval</code> 함수의 반환값을 저장한다.  
<code class="language-plaintext highlighter-rouge">let running</code>은 스톱워치가 실행 중인지 여부를 나타내는 불리언 값이고,<code class="language-plaintext highlighter-rouge">let time</code>은 스톱워치의 현재 시간을 초 단위로 저장한다.</p>

<h2 id="시작정지-버튼-클릭-이벤트-핸들러">시작/정지 버튼 클릭 이벤트 핸들러</h2>
<p><code class="language-plaintext highlighter-rouge">document.getElementById('startStopButton').addEventListener('click', () =&gt; { ... });</code> 코드를 사용하여 시작/정지 버튼 클릭 이벤트 핸들러를 정의한다
이 핸들러는 버튼 클릭 시 타이머를 시작하거나 정지한다</p>

<h3 id="타이머-정지">타이머 정지</h3>
<p>만약 <code class="language-plaintext highlighter-rouge">running</code> 이 <code class="language-plaintext highlighter-rouge">true</code>라면 <code class="language-plaintext highlighter-rouge">clearInterval(timer);</code>를 사용하여 타이머를 정지한다. 
<br />이때, 타이머 ID는 이전에 <code class="language-plaintext highlighter-rouge">setInterval</code>함수로부터 반환된 값이다. <br />또한, 시작/정지 버튼의 텍스트를 start로 변경해준다.
<br /></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>document.getElementById('startStopButton').addEventListener('click', () =&gt; {
    if (running) 
        clearInterval(timer);  // 타이머 정지
        document.getElementById('startStopButton').textContent = 'Start';  // 버튼 텍스트 변경
</code></pre></div></div>
<p><br /></p>
<h3 id="타이머-시작">타이머 시작</h3>
<p>만약 <code class="language-plaintext highlighter-rouge">running</code>이 <code class="language-plaintext highlighter-rouge">false</code>이면  <code class="language-plaintext highlighter-rouge">setInterval</code>함수를 사용하여 타이머를 시작한다. <br />
<code class="language-plaintext highlighter-rouge">setInterval</code> 함수는 첫 번째 인수로 콜백함수를 받고, 두번째 인수로 시간 간격(밀리초 단위)를 받는다. 
<br />이 함수는 주어진 시간 간격마다 콜백 함수를 반복 실행하며, 고유 타이머 아이디를 생성한다. 
이 고유 타이머 ID는 <code class="language-plaintext highlighter-rouge">clearInterval</code> 함수를 사용하여 타이머를 중지할 때 사용된다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>else {
        timer = setInterval(() =&gt; {
            time++;
            document.getElementById('timer').textContent = new Date(time * 1000).toISOString().substr(11, 8);  // 시간 업데이트
        }, 1000);  // 1초마다 업데이트
        document.getElementById('startStopButton').textContent = 'Stop';  // 버튼 텍스트 변경
    }
    running = !running;  // 상태 변경
});
</code></pre></div></div>
<h4 id="고유-타이머-id는-어떻게-반환해오는데">고유 타이머 ID는 어떻게 반환해오는데?</h4>

<ol>
  <li><code class="language-plaintext highlighter-rouge">setInterval</code> 함수가 호출된다
    <ul>
      <li>콜백 함수 등록 : 첫번째 인수로 전달된 콜백 함수가 실행 큐에 등록된다</li>
      <li>시간 간격 설정 : 두 번째 인수로 전달된 시간 간격(밀리초 단위)가 설정된다</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">setInterval</code> 함수는 내부적으로 타이머를 생성하고 , 이를 관리하기 위해 고유한 Id 를 할당한다</li>
  <li>이 타이머 ID는 <code class="language-plaintext highlighter-rouge">setInterval</code> 함수의 반환값으로 전달된다</li>
</ol>

<p><code class="language-plaintext highlighter-rouge">setInterval</code> 함수의 콜백 함수에서는 <code class="language-plaintext highlighter-rouge">time</code>변수를 1씩 증가시키고 이를 초 단위로 변환하여 화면에 표시한다. 
<code class="language-plaintext highlighter-rouge">toTSOString</code> 메서드는 <code class="language-plaintext highlighter-rouge">Date</code>객체를 ISO 8601 확장 형식 문자열로 변환한다. 
-<code class="language-plaintext highlighter-rouge">substr(11, 8)</code> 은 시간 부분(HH:MM)만 추출한다.</p>

<h1 id="리셋-버튼-클릭-이벤트-핸들러">리셋 버튼 클릭 이벤트 핸들러</h1>
<p>리셋 버튼의 클릭 이벤트 핸들러는 <code class="language-plaintext highlighter-rouge">document.getElementById('resetButton').addEventListener('click', ()=&gt; {...};</code> 로 정의된다. 이 핸들러는 버튼이 클릭되며 타이머를 정지하고 <code class="language-plaintext highlighter-rouge">running</code>상태를 <code class="language-plaintext highlighter-rouge">false</code>로 설정한다.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">time</code> 변수를 0으로 초기화하고 시간 표시 요소를 <code class="language-plaintext highlighter-rouge">00:00:00</code>으로 업데이트한다.</li>
  <li>시작/정지 버튼의 텍스트를 <code class="language-plaintext highlighter-rouge">Start</code>로 변경시킨다.</li>
</ul>

<h1 id="저장-버튼-클릭-이벤트-핸들러">저장 버튼 클릭 이벤트 핸들러</h1>

<p>저장 버튼 클릭 이벤트 핸들러가 가장 구현하기 힘들었던 것 같다. 첫째로 비동기 통신 처리를 구현하여야 했다. 사실 비동기 통신 처리라는 말이 어려워 보이기는 해도 그냥 저장 버튼을 클릭하면 클라이언트에서 서버로 데이터 전송하는거 뿐인데, 내가 처음으로 Post 라우터를 작성한 파일이 이 파일이여서 설정하는 데 꽤나 애를 먹었다.</p>

<p><code class="language-plaintext highlighter-rouge">fetch</code> API를 사용하여 비동기 post 요청을 보내는 중 서버로부터 응답을 기다리거나 오류를 처리하는 부분이 여느 떄마냥 쉽지 않았다.</p>

<p>또, 스톱워치의 시간은 초단위로 저장되지만 이를 서버에 전송할때는 json 형식으로 변환해야 했다. 또한 서버로부터 응답을 받을 때도 JSON 형식으로 파싱하여 처리해야 했다. 이 과정에서 데이터 형식 변환과 관련된 오류가 많이 발생하였는데, 이또한 까다롭기 그지 없었다.</p>

<p>아 진짜 이제는 뭘 어떤 기능을 집어넣어야할지도 모르겠고 아무래도 내가 디자인을 안하다 보니 디자인을 어떻게 해야 예쁘게 프로젝트가 만들어지는지도 솔직히 감이 안 잡힌다. 웹디자인 자격증을 취득해보는것도 좋은 방법인 것 같다.</p>]]></content><author><name>insidepixce</name></author><category term="test" /><category term="til" /><summary type="html"><![CDATA[이번에 구현하게 된 기능들 중에 조금 까다로웠던 부분이 있어서 이번 프로젝트에 대해서는 한번 포스팅해 보고 싶었다. 내가 구현해야 할 기능은 스탑워치를 실행하고, 멈추고, 저장 버튼을 누르면 서버에 업로드되어, 새로고침 후에도 저장한 시간부터 다시 공부시간을 측정하는 것이였다.]]></summary></entry></feed>